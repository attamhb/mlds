(undo-tree-save-format-version . 1)
"1fb9ce9a20a5bfb5ec86da15f65fdae0fe287642"
[nil nil nil nil (25756 25558 423422 966000) 0 nil]
([nil nil ((139 . 140) (#("â€™" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 139) (undo-tree-id80 . -1) (t 25755 18814 512239 803000)) nil (25757 58808 976986 519000) 0 nil])
([nil nil ((155 . 156) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 155) (undo-tree-id78 . -1) (undo-tree-id79 . -1)) nil (25757 58808 976984 39000) 0 nil])
([nil nil ((156 . 157)) nil (25757 58808 976981 299000) 0 nil])
([nil nil ((176 . 177) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -176) (undo-tree-id77 . -1) 157) nil (25757 58808 976980 63000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -157) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . 1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) 158 (#("and" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 158) (undo-tree-id74 . -2) (undo-tree-id75 . -3) (undo-tree-id76 . -3)) nil (25757 58808 976976 355000) 0 nil])
([nil nil ((99 . 101)) nil (25757 58808 976914 877000) 0 nil])
([nil nil ((160 . 162)) nil (25757 58808 976913 700000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 159) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1)) nil (25757 58808 976911 658000) 0 nil])
([nil nil ((164 . 165) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -164) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 165 (161 . 165) (#("they have" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 161) (undo-tree-id12 . -8) (undo-tree-id13 . -8) (undo-tree-id14 . 9) (undo-tree-id15 . -5) (undo-tree-id16 . -8) (undo-tree-id17 . -8) (undo-tree-id18 . -9) (undo-tree-id19 . -8) (undo-tree-id20 . -3) (undo-tree-id21 . -8) (undo-tree-id22 . -8) (undo-tree-id23 . -9) (undo-tree-id24 . -9) (undo-tree-id25 . -9) 169) nil (25757 58808 976891 703000) 0 nil])
([nil nil ((166 . 171) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -166) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . 1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -167) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -168) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) 169 (167 . 169) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -167) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -168) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) 169 (166 . 169) (t 25757 58809 34588 267000)) nil (25757 58823 7728 15000) 0 nil])
([nil nil ((159 . 221) (#("- 
- CNNs have been used in image recognition since the 1980s." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 4 9 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 9 19 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 19 20 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 20 62 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 159) (undo-tree-id271 . 47) (undo-tree-id272 . -5) (undo-tree-id273 . -5) (undo-tree-id274 . 53) (undo-tree-id275 . -5) (undo-tree-id276 . -5) (undo-tree-id277 . -7) (undo-tree-id278 . 57) (undo-tree-id279 . -9) (undo-tree-id280 . -10) (undo-tree-id281 . -10) (undo-tree-id282 . -10) (undo-tree-id283 . -10) (undo-tree-id284 . -10) (undo-tree-id285 . -10) (undo-tree-id286 . -10) (undo-tree-id287 . -10) (undo-tree-id288 . -10) (undo-tree-id289 . -10) (undo-tree-id290 . -10) (undo-tree-id291 . -10) (undo-tree-id292 . -10) (undo-tree-id293 . -10) (undo-tree-id294 . -10) (undo-tree-id295 . -10) (undo-tree-id296 . -10) (undo-tree-id297 . -10) (undo-tree-id298 . -10) (undo-tree-id299 . -10) (undo-tree-id300 . -10) (undo-tree-id301 . -10) (undo-tree-id302 . -10) (undo-tree-id303 . -10) (undo-tree-id304 . -10) (undo-tree-id305 . -10) (undo-tree-id306 . -10) (undo-tree-id307 . -10) (undo-tree-id308 . -10) (undo-tree-id309 . -10) (undo-tree-id310 . -10) (undo-tree-id311 . -10) (undo-tree-id312 . -10) (undo-tree-id313 . -10) (undo-tree-id314 . -10) (undo-tree-id315 . -10) (undo-tree-id316 . -10) (undo-tree-id317 . -10) (undo-tree-id318 . -10) (undo-tree-id319 . -10) (undo-tree-id320 . -10) (undo-tree-id321 . -10) (undo-tree-id322 . -10) (undo-tree-id323 . -10) (undo-tree-id324 . -10) (undo-tree-id325 . -10) (undo-tree-id326 . -10) (undo-tree-id327 . -10) (undo-tree-id328 . -10) (undo-tree-id329 . -10) (undo-tree-id330 . -10) (undo-tree-id331 . -10) (undo-tree-id332 . -10) (undo-tree-id333 . -10) (undo-tree-id334 . -10) (undo-tree-id335 . -10) (undo-tree-id336 . -10) (undo-tree-id337 . -10) (undo-tree-id338 . -10) (undo-tree-id339 . -10) (undo-tree-id340 . -10) (undo-tree-id341 . -10) (undo-tree-id342 . -10) (undo-tree-id343 . -10) (undo-tree-id344 . -10) (undo-tree-id345 . -10) (undo-tree-id346 . -10) (undo-tree-id347 . -10) (undo-tree-id348 . -10) (undo-tree-id349 . -10) (undo-tree-id350 . -10) (undo-tree-id351 . -10) (undo-tree-id352 . -10) (undo-tree-id353 . -10) (undo-tree-id354 . -10) (undo-tree-id355 . -10) (undo-tree-id356 . -10) (undo-tree-id357 . -20) (undo-tree-id358 . -62) (undo-tree-id359 . -20) (undo-tree-id360 . -20) (undo-tree-id361 . -20) (undo-tree-id362 . -20) (undo-tree-id363 . -20) (undo-tree-id364 . -20) (undo-tree-id365 . -20) (undo-tree-id366 . -20) (undo-tree-id367 . -20) (undo-tree-id368 . -20) (undo-tree-id369 . -20) (undo-tree-id370 . -25) (undo-tree-id371 . -28) (undo-tree-id372 . -34) (undo-tree-id373 . -46) (undo-tree-id374 . -52) (undo-tree-id375 . -56) (undo-tree-id376 . -61) (undo-tree-id377 . -62) (undo-tree-id378 . -62) (undo-tree-id379 . -62) (undo-tree-id380 . -62) (undo-tree-id381 . -62) (undo-tree-id382 . -62) (undo-tree-id383 . -62) (undo-tree-id384 . -62) (undo-tree-id385 . -62) (undo-tree-id386 . -62) (undo-tree-id387 . -62) (undo-tree-id388 . -3) (159 . 162) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 218) (t 25757 58823 14653 767000)) nil (25757 58866 179152 830000) 0 nil])
([nil nil ((220 . 221) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -220) (undo-tree-id254 . 1) (undo-tree-id255 . 1) (undo-tree-id256 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 220) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -221) (undo-tree-id268 . 1) (undo-tree-id269 . 1) (undo-tree-id270 . -1) 220) nil (25757 58866 178966 195000) 0 nil])
([nil nil ((221 . 222) (#("Due to the i" 0 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 221) (undo-tree-id238 . -11) (undo-tree-id239 . 12) (undo-tree-id240 . -11) (undo-tree-id241 . -11) (undo-tree-id242 . -11) (undo-tree-id243 . -12) (undo-tree-id244 . -11) (undo-tree-id245 . -2) (undo-tree-id246 . -5) (undo-tree-id247 . -9) (undo-tree-id248 . -12) (undo-tree-id249 . -11) (undo-tree-id250 . -11) (undo-tree-id251 . -12) (undo-tree-id252 . -12) (undo-tree-id253 . -12) 232) nil (25757 58866 178953 86000) 0 nil])
([nil nil ((287 . 290)) nil (25757 58866 178846 763000) 0 nil])
([nil nil ((347 . 348)) nil (25757 58866 178845 454000) 0 nil])
([nil nil ((#("on some complex visual tasks. " 0 30 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 349) (undo-tree-id235 . -29) (undo-tree-id236 . -30) (undo-tree-id237 . -30)) nil (25757 58866 178841 671000) 0 nil])
([nil nil ((#("They power image search services, 
" 0 35 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 351) (undo-tree-id424 . -34) (undo-tree-id425 . -35) (t 25757 58866 186884 799000)) nil (25757 58879 236625 113000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 350) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1)) nil (25757 58879 236618 198000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 369) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (t 25757 58879 238962 450000)) nil (25757 58882 668347 788000) 0 nil])
([nil nil ((389 . 390) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 389) (undo-tree-id428 . -1) (t 25757 58882 674983 447000)) nil (25757 58889 283559 309000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 413) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (t 25757 58889 291024 514000)) nil (25757 58892 515913 945000) 0 nil])
([nil nil ((423 . 424) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 423) (undo-tree-id431 . -1) (t 25757 58892 519044 849000)) nil (25757 58895 996341 888000) 0 nil])
([nil nil ((446 . 447) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 446) (undo-tree-id443 . -1) (t 25757 58896 3067 9000)) nil (25757 58903 891497 599000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -446) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) 447 (446 . 447)) nil (25757 58903 891491 753000) 0 nil])
([nil nil ((455 . 456) (#("p" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 455) (undo-tree-id444 . -1) (t 25757 58903 899118 53000)) nil (25757 58907 314797 627000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 465) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (t 25757 58907 323140 530000)) nil (25757 58909 959186 318000) 0 nil])
([nil nil ((#("The convolutional layer is the fundamental building block of a CNN, playing a
" 0 78 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 492) (undo-tree-id451 . -77) (undo-tree-id452 . -78) (t 25757 58909 967158 24000)) nil (25757 58933 759084 767000) 0 nil])
([nil nil ((#("crucial role in its architecture.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 492) (undo-tree-id449 . -33) (undo-tree-id450 . -34)) nil (25757 58940 100624 653000) 0 nil])
([nil nil ((#("Rather than being connected to every single pixel in the input image" 0 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 493) (undo-tree-id470 . -67) (undo-tree-id471 . -68)) nil (25757 58949 740025 922000) 0 nil] [nil nil ((#("Rather than being connected to every single pixel in the input image" 0 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 493) (undo-tree-id453 . -67) (undo-tree-id454 . -68)) ((493 . 561)) (25757 58940 100412 36000) 0 nil] [nil nil ((#("Rather than being connected to every single pixel in the input image" 0 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 493) (undo-tree-id447 . -67) (undo-tree-id448 . -68)) ((493 . 561)) (25757 58933 759074 867000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 493) (undo-tree-id468 . -1) (undo-tree-id469 . -1)) nil (25757 58949 740023 613000) 0 nil])
nil
nil
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 493) (undo-tree-id466 . -1) (undo-tree-id467 . -1)) nil (25757 58949 740021 440000) 0 nil])
([nil nil ((493 . 494) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 493)) nil (25757 58949 740018 515000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -493) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) 494 (493 . 494)) nil (25757 58949 740014 27000) 0 nil])
([nil nil ((503 . 504) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -503) (undo-tree-id474 . -1) 493 (t 25757 58949 746062 310000)) nil (25757 58953 187859 465000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -568) (nil fontified nil 567 . 568) (nil wrap-prefix #("  " 0 2 (face org-indent)) 567 . 568) (567 . 568) 503) nil (25757 58953 187856 757000) 0 nil])
([nil nil ((581 . 582) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -581) (undo-tree-id472 . 1) (undo-tree-id473 . -1) 568) nil (25757 58953 187851 683000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 491) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (t 25757 58953 189932 770000)) nil (25757 59013 982287 112000) 0 nil])
([nil nil ((1809 . 1810) (t 25757 59013 991803 306000)) nil (25757 59043 667886 256000) 0 nil])
([nil nil ((1812 . 1813) (#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -1812) (undo-tree-id484 . -1) 1810) nil (25757 59043 667880 942000) 0 nil])
([nil nil ((#(", as shown in Figure 14-4" 0 25 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1845) (undo-tree-id485 . -24) (undo-tree-id486 . -3) (undo-tree-id487 . -9) (undo-tree-id488 . -12) (undo-tree-id489 . -11) (undo-tree-id490 . -5) (undo-tree-id491 . -2) (undo-tree-id492 . -25) (t 25757 59043 674865 619000)) nil (25757 59052 327343 748000) 0 nil])
([nil nil ((#("This" 0 4 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1847) (undo-tree-id497 . -3) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (t 25757 59052 330603 978000)) nil (25757 59077 798703 343000) 0 nil])
([nil nil ((#("dramatically reduces the modelâ€™s computational complexity" 0 26 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 26 57 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1848) (undo-tree-id711 . -56) (undo-tree-id712 . -57)) nil (25757 59085 487383 462000) 0 nil] [nil nil ((#("dramatically reduces the modelâ€™s computational complexity. The shift
" 0 26 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 26 69 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1848) (undo-tree-id495 . -68) (undo-tree-id496 . -69)) ((1848 . 1917)) (25757 59077 309729 720000) 0 nil])
([nil nil ((#(". " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1848) (undo-tree-id709 . -1) (undo-tree-id710 . -2)) nil (25757 59085 487381 344000) 0 nil])
([nil nil ((#("from one receptive field to the next is called the stride. 
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1 60 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1848) (undo-tree-id493 . -59) (undo-tree-id494 . -60)) ((1848 . 1908) (t 25757 59076 233908 1000)) (25757 59076 227433 9000) 0 nil])
([nil nil ((1846 . 1847) (#(" " 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1846) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -1847) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) 1810) nil (25757 59085 487372 863000) 0 nil])
nil
([nil nil ((1856 . 1857) (#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -1856) (undo-tree-id501 . -1) 1846) nil (25757 59085 487185 749000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)))) . -1889) (nil wrap-prefix #("    " 0 4 (face org-indent)) 1888 . 1889) (1888 . 1889) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1915) (undo-tree-id500 . -1) 1856) nil (25757 59085 487179 831000) 0 nil])
([nil nil ((1885 . 1886) (t 25757 59085 493648 596000)) nil (25757 59094 237367 42000) 0 nil])
([nil nil ((1889 . 1890) (#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -1889) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) 1886) nil (25757 59094 237362 504000) 0 nil])
([nil nil ((1974 . 1975) (1962 . 1974) (1941 . 1962) (1920 . 1941) (#("_" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table)) . -1920) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) 1921 (1920 . 1921) (1919 . 1920) (1918 . 1919) (#("+" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)))) . -1918) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)))) . -1919) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) 1920 (1918 . 1920) (#("+" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)))) . -1918) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) 1919 (1918 . 1919) (#("*" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -1918) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) 1919 (1918 . 1919) (1917 . 1918) (t 25757 59094 245408 513000) 1917) nil (25757 59134 272737 180000) 0 nil])
([nil nil ((#("|+------------------------------------------------------|
" 0 57 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 57 58 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1918) (undo-tree-id1446 . -57) (undo-tree-id1447 . 58) (undo-tree-id1448 . -58) (undo-tree-id1449 . -58) (undo-tree-id1450 . -58) (undo-tree-id1451 . -58) (undo-tree-id1452 . -58) (undo-tree-id1453 . -58) (undo-tree-id1454 . -58) (undo-tree-id1455 . -58) (undo-tree-id1456 . -58) (undo-tree-id1457 . -58) (undo-tree-id1458 . -58) (undo-tree-id1459 . -58) (undo-tree-id1460 . -58) (undo-tree-id1461 . -58) (undo-tree-id1462 . -58) (undo-tree-id1463 . -58) (undo-tree-id1464 . -58) (undo-tree-id1465 . -58) (undo-tree-id1466 . -58) (undo-tree-id1467 . -58) (undo-tree-id1468 . -58) (undo-tree-id1469 . -3) (undo-tree-id1470 . -58) (undo-tree-id1471 . -58) (undo-tree-id1472 . -58) (undo-tree-id1473 . -58) (undo-tree-id1474 . -58) (undo-tree-id1475 . -58) (undo-tree-id1476 . -58) (undo-tree-id1477 . -58) (undo-tree-id1478 . -58) (undo-tree-id1479 . -58) (undo-tree-id1480 . -58) (undo-tree-id1481 . -58) (undo-tree-id1482 . -58) (undo-tree-id1483 . -58) (undo-tree-id1484 . -58) (undo-tree-id1485 . -58) (undo-tree-id1486 . -58) (undo-tree-id1487 . -58) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -2) (undo-tree-id1498 . -2) (undo-tree-id1499 . -2) (undo-tree-id1500 . -2) (undo-tree-id1501 . -2) (undo-tree-id1502 . -2) (undo-tree-id1503 . -2) (undo-tree-id1504 . -2) (undo-tree-id1505 . -2) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (undo-tree-id1508 . -2) (undo-tree-id1509 . -2) (undo-tree-id1510 . -2) (undo-tree-id1511 . -2) (undo-tree-id1512 . -2) (undo-tree-id1513 . -2) (undo-tree-id1514 . -2) (undo-tree-id1515 . -2) (undo-tree-id1516 . -2) (undo-tree-id1517 . -2) (undo-tree-id1518 . -2) (undo-tree-id1519 . -2) (undo-tree-id1520 . -2) (undo-tree-id1521 . -2) (undo-tree-id1522 . -2) (undo-tree-id1523 . -2) (undo-tree-id1524 . -3) (undo-tree-id1525 . -3) (undo-tree-id1526 . -3) (undo-tree-id1527 . -3) (undo-tree-id1528 . -3) (undo-tree-id1529 . -3) (undo-tree-id1530 . -3) (undo-tree-id1531 . -3) (undo-tree-id1532 . -3) (undo-tree-id1533 . -4) (undo-tree-id1534 . -4) (undo-tree-id1535 . -4) (undo-tree-id1536 . -4) (undo-tree-id1537 . -4) (undo-tree-id1538 . -4) (undo-tree-id1539 . -4) (undo-tree-id1540 . -4) (undo-tree-id1541 . -4) (undo-tree-id1542 . -5) (undo-tree-id1543 . -5) (undo-tree-id1544 . -5) (undo-tree-id1545 . -5) (undo-tree-id1546 . -5) (undo-tree-id1547 . -5) (undo-tree-id1548 . -5) (undo-tree-id1549 . -5) (undo-tree-id1550 . -5) (undo-tree-id1551 . -6) (undo-tree-id1552 . -6) (undo-tree-id1553 . -6) (undo-tree-id1554 . -6) (undo-tree-id1555 . -6) (undo-tree-id1556 . -6) (undo-tree-id1557 . -6) (undo-tree-id1558 . -6) (undo-tree-id1559 . -6) (undo-tree-id1560 . -7) (undo-tree-id1561 . -7) (undo-tree-id1562 . -7) (undo-tree-id1563 . -7) (undo-tree-id1564 . -7) (undo-tree-id1565 . -7) (undo-tree-id1566 . -7) (undo-tree-id1567 . -7) (undo-tree-id1568 . -7) (undo-tree-id1569 . -8) (undo-tree-id1570 . -8) (undo-tree-id1571 . -8) (undo-tree-id1572 . -8) (undo-tree-id1573 . -8) (undo-tree-id1574 . -8) (undo-tree-id1575 . -8) (undo-tree-id1576 . -8) (undo-tree-id1577 . -8) (undo-tree-id1578 . -9) (undo-tree-id1579 . -9) (undo-tree-id1580 . -9) (undo-tree-id1581 . -9) (undo-tree-id1582 . -9) (undo-tree-id1583 . -9) (undo-tree-id1584 . -9) (undo-tree-id1585 . -9) (undo-tree-id1586 . -9) (undo-tree-id1587 . -10) (undo-tree-id1588 . -10) (undo-tree-id1589 . -10) (undo-tree-id1590 . -10) (undo-tree-id1591 . -10) (undo-tree-id1592 . -10) (undo-tree-id1593 . -10) (undo-tree-id1594 . -10) (undo-tree-id1595 . -10) (undo-tree-id1596 . -11) (undo-tree-id1597 . -11) (undo-tree-id1598 . -11) (undo-tree-id1599 . -11) (undo-tree-id1600 . -11) (undo-tree-id1601 . -11) (undo-tree-id1602 . -11) (undo-tree-id1603 . -11) (undo-tree-id1604 . -11) (undo-tree-id1605 . -12) (undo-tree-id1606 . -12) (undo-tree-id1607 . -12) (undo-tree-id1608 . -12) (undo-tree-id1609 . -12) (undo-tree-id1610 . -12) (undo-tree-id1611 . -12) (undo-tree-id1612 . -12) (undo-tree-id1613 . -12) (undo-tree-id1614 . -13) (undo-tree-id1615 . -13) (undo-tree-id1616 . -13) (undo-tree-id1617 . -13) (undo-tree-id1618 . -13) (undo-tree-id1619 . -13) (undo-tree-id1620 . -13) (undo-tree-id1621 . -13) (undo-tree-id1622 . -13) (undo-tree-id1623 . -14) (undo-tree-id1624 . -14) (undo-tree-id1625 . -14) (undo-tree-id1626 . -14) (undo-tree-id1627 . -14) (undo-tree-id1628 . -14) (undo-tree-id1629 . -14) (undo-tree-id1630 . -14) (undo-tree-id1631 . -14) (undo-tree-id1632 . -15) (undo-tree-id1633 . -15) (undo-tree-id1634 . -15) (undo-tree-id1635 . -15) (undo-tree-id1636 . -15) (undo-tree-id1637 . -15) (undo-tree-id1638 . -15) (undo-tree-id1639 . -15) (undo-tree-id1640 . -15) (undo-tree-id1641 . -16) (undo-tree-id1642 . -16) (undo-tree-id1643 . -16) (undo-tree-id1644 . -16) (undo-tree-id1645 . -16) (undo-tree-id1646 . -16) (undo-tree-id1647 . -16) (undo-tree-id1648 . -16) (undo-tree-id1649 . -16) (undo-tree-id1650 . -17) (undo-tree-id1651 . -17) (undo-tree-id1652 . -17) (undo-tree-id1653 . -17) (undo-tree-id1654 . -17) (undo-tree-id1655 . -17) (undo-tree-id1656 . -17) (undo-tree-id1657 . -17) (undo-tree-id1658 . -17) (undo-tree-id1659 . -18) (undo-tree-id1660 . -18) (undo-tree-id1661 . -18) (undo-tree-id1662 . -18) (undo-tree-id1663 . -18) (undo-tree-id1664 . -18) (undo-tree-id1665 . -18) (undo-tree-id1666 . -18) (undo-tree-id1667 . -18) (undo-tree-id1668 . -19) (undo-tree-id1669 . -19) (undo-tree-id1670 . -19) (undo-tree-id1671 . -19) (undo-tree-id1672 . -19) (undo-tree-id1673 . -19) (undo-tree-id1674 . -19) (undo-tree-id1675 . -19) (undo-tree-id1676 . -19) (undo-tree-id1677 . -20) (undo-tree-id1678 . -20) (undo-tree-id1679 . -20) (undo-tree-id1680 . -20) (undo-tree-id1681 . -20) (undo-tree-id1682 . -20) (undo-tree-id1683 . -20) (undo-tree-id1684 . -20) (undo-tree-id1685 . -20) (undo-tree-id1686 . -21) (undo-tree-id1687 . -21) (undo-tree-id1688 . -21) (undo-tree-id1689 . -21) (undo-tree-id1690 . -21) (undo-tree-id1691 . -21) (undo-tree-id1692 . -21) (undo-tree-id1693 . -21) (undo-tree-id1694 . -21) (undo-tree-id1695 . -22) (undo-tree-id1696 . -22) (undo-tree-id1697 . -22) (undo-tree-id1698 . -22) (undo-tree-id1699 . -22) (undo-tree-id1700 . -22) (undo-tree-id1701 . -22) (undo-tree-id1702 . -22) (undo-tree-id1703 . -22) (undo-tree-id1704 . -23) (undo-tree-id1705 . -23) (undo-tree-id1706 . -23) (undo-tree-id1707 . -23) (undo-tree-id1708 . -23) (undo-tree-id1709 . -23) (undo-tree-id1710 . -23) (undo-tree-id1711 . -23) (undo-tree-id1712 . -23) (undo-tree-id1713 . -24) (undo-tree-id1714 . -24) (undo-tree-id1715 . -24) (undo-tree-id1716 . -24) (undo-tree-id1717 . -24) (undo-tree-id1718 . -24) (undo-tree-id1719 . -24) (undo-tree-id1720 . -24) (undo-tree-id1721 . -24) (undo-tree-id1722 . -25) (undo-tree-id1723 . -25) (undo-tree-id1724 . -25) (undo-tree-id1725 . -25) (undo-tree-id1726 . -25) (undo-tree-id1727 . -25) (undo-tree-id1728 . -25) (undo-tree-id1729 . -25) (undo-tree-id1730 . -25) (undo-tree-id1731 . -26) (undo-tree-id1732 . -26) (undo-tree-id1733 . -26) (undo-tree-id1734 . -26) (undo-tree-id1735 . -26) (undo-tree-id1736 . -26) (undo-tree-id1737 . -26) (undo-tree-id1738 . -26) (undo-tree-id1739 . -26) (undo-tree-id1740 . -27) (undo-tree-id1741 . -27) (undo-tree-id1742 . -27) (undo-tree-id1743 . -27) (undo-tree-id1744 . -27) (undo-tree-id1745 . -27) (undo-tree-id1746 . -27) (undo-tree-id1747 . -27) (undo-tree-id1748 . -27) (undo-tree-id1749 . -28) (undo-tree-id1750 . -28) (undo-tree-id1751 . -28) (undo-tree-id1752 . -28) (undo-tree-id1753 . -28) (undo-tree-id1754 . -28) (undo-tree-id1755 . -28) (undo-tree-id1756 . -28) (undo-tree-id1757 . -28) (undo-tree-id1758 . -29) (undo-tree-id1759 . -29) (undo-tree-id1760 . -29) (undo-tree-id1761 . -29) (undo-tree-id1762 . -29) (undo-tree-id1763 . -29) (undo-tree-id1764 . -29) (undo-tree-id1765 . -29) (undo-tree-id1766 . -29) (undo-tree-id1767 . -30) (undo-tree-id1768 . -30) (undo-tree-id1769 . -30) (undo-tree-id1770 . -30) (undo-tree-id1771 . -30) (undo-tree-id1772 . -30) (undo-tree-id1773 . -30) (undo-tree-id1774 . -30) (undo-tree-id1775 . -30) (undo-tree-id1776 . -31) (undo-tree-id1777 . -31) (undo-tree-id1778 . -31) (undo-tree-id1779 . -31) (undo-tree-id1780 . -31) (undo-tree-id1781 . -31) (undo-tree-id1782 . -31) (undo-tree-id1783 . -31) (undo-tree-id1784 . -31) (undo-tree-id1785 . -32) (undo-tree-id1786 . -32) (undo-tree-id1787 . -32) (undo-tree-id1788 . -32) (undo-tree-id1789 . -32) (undo-tree-id1790 . -32) (undo-tree-id1791 . -32) (undo-tree-id1792 . -32) (undo-tree-id1793 . -32) (undo-tree-id1794 . -33) (undo-tree-id1795 . -33) (undo-tree-id1796 . -33) (undo-tree-id1797 . -33) (undo-tree-id1798 . -33) (undo-tree-id1799 . -33) (undo-tree-id1800 . -33) (undo-tree-id1801 . -33) (undo-tree-id1802 . -33) (undo-tree-id1803 . -34) (undo-tree-id1804 . -34) (undo-tree-id1805 . -34) (undo-tree-id1806 . -34) (undo-tree-id1807 . -34) (undo-tree-id1808 . -34) (undo-tree-id1809 . -34) (undo-tree-id1810 . -34) (undo-tree-id1811 . -34) (undo-tree-id1812 . -35) (undo-tree-id1813 . -35) (undo-tree-id1814 . -35) (undo-tree-id1815 . -35) (undo-tree-id1816 . -35) (undo-tree-id1817 . -35) (undo-tree-id1818 . -35) (undo-tree-id1819 . -35) (undo-tree-id1820 . -35) (undo-tree-id1821 . -36) (undo-tree-id1822 . -36) (undo-tree-id1823 . -36) (undo-tree-id1824 . -36) (undo-tree-id1825 . -36) (undo-tree-id1826 . -36) (undo-tree-id1827 . -36) (undo-tree-id1828 . -36) (undo-tree-id1829 . -36) (undo-tree-id1830 . -37) (undo-tree-id1831 . -37) (undo-tree-id1832 . -37) (undo-tree-id1833 . -37) (undo-tree-id1834 . -37) (undo-tree-id1835 . -37) (undo-tree-id1836 . -37) (undo-tree-id1837 . -37) (undo-tree-id1838 . -37) (undo-tree-id1839 . -38) (undo-tree-id1840 . -38) (undo-tree-id1841 . -38) (undo-tree-id1842 . -38) (undo-tree-id1843 . -38) (undo-tree-id1844 . -38) (undo-tree-id1845 . -38) (undo-tree-id1846 . -38) (undo-tree-id1847 . -38) (undo-tree-id1848 . -39) (undo-tree-id1849 . -39) (undo-tree-id1850 . -39) (undo-tree-id1851 . -39) (undo-tree-id1852 . -39) (undo-tree-id1853 . -39) (undo-tree-id1854 . -39) (undo-tree-id1855 . -39) (undo-tree-id1856 . -39) (undo-tree-id1857 . -40) (undo-tree-id1858 . -40) (undo-tree-id1859 . -40) (undo-tree-id1860 . -40) (undo-tree-id1861 . -40) (undo-tree-id1862 . -40) (undo-tree-id1863 . -40) (undo-tree-id1864 . -40) (undo-tree-id1865 . -40) (undo-tree-id1866 . -41) (undo-tree-id1867 . -41) (undo-tree-id1868 . -41) (undo-tree-id1869 . -41) (undo-tree-id1870 . -41) (undo-tree-id1871 . -41) (undo-tree-id1872 . -41) (undo-tree-id1873 . -41) (undo-tree-id1874 . -41) (undo-tree-id1875 . -42) (undo-tree-id1876 . -42) (undo-tree-id1877 . -42) (undo-tree-id1878 . -42) (undo-tree-id1879 . -42) (undo-tree-id1880 . -42) (undo-tree-id1881 . -42) (undo-tree-id1882 . -42) (undo-tree-id1883 . -42) (undo-tree-id1884 . -43) (undo-tree-id1885 . -43) (undo-tree-id1886 . -43) (undo-tree-id1887 . -43) (undo-tree-id1888 . -43) (undo-tree-id1889 . -43) (undo-tree-id1890 . -43) (undo-tree-id1891 . -43) (undo-tree-id1892 . -43) (undo-tree-id1893 . -44) (undo-tree-id1894 . -44) (undo-tree-id1895 . -44) (undo-tree-id1896 . -44) (undo-tree-id1897 . -44) (undo-tree-id1898 . -44) (undo-tree-id1899 . -44) (undo-tree-id1900 . -44) (undo-tree-id1901 . -44) (undo-tree-id1902 . -45) (undo-tree-id1903 . -45) (undo-tree-id1904 . -45) (undo-tree-id1905 . -45) (undo-tree-id1906 . -45) (undo-tree-id1907 . -45) (undo-tree-id1908 . -45) (undo-tree-id1909 . -45) (undo-tree-id1910 . -45) (undo-tree-id1911 . -46) (undo-tree-id1912 . -46) (undo-tree-id1913 . -46) (undo-tree-id1914 . -46) (undo-tree-id1915 . -46) (undo-tree-id1916 . -46) (undo-tree-id1917 . -46) (undo-tree-id1918 . -46) (undo-tree-id1919 . -46) (undo-tree-id1920 . -47) (undo-tree-id1921 . -47) (undo-tree-id1922 . -47) (undo-tree-id1923 . -47) (undo-tree-id1924 . -47) (undo-tree-id1925 . -47) (undo-tree-id1926 . -47) (undo-tree-id1927 . -47) (undo-tree-id1928 . -47) (undo-tree-id1929 . -48) (undo-tree-id1930 . -48) (undo-tree-id1931 . -48) (undo-tree-id1932 . -48) (undo-tree-id1933 . -48) (undo-tree-id1934 . -48) (undo-tree-id1935 . -48) (undo-tree-id1936 . -48) (undo-tree-id1937 . -48) (undo-tree-id1938 . -49) (undo-tree-id1939 . -49) (undo-tree-id1940 . -49) (undo-tree-id1941 . -49) (undo-tree-id1942 . -49) (undo-tree-id1943 . -49) (undo-tree-id1944 . -49) (undo-tree-id1945 . -49) (undo-tree-id1946 . -49) (undo-tree-id1947 . -50) (undo-tree-id1948 . -50) (undo-tree-id1949 . -50) (undo-tree-id1950 . -50) (undo-tree-id1951 . -50) (undo-tree-id1952 . -50) (undo-tree-id1953 . -50) (undo-tree-id1954 . -50) (undo-tree-id1955 . -50) (undo-tree-id1956 . -51) (undo-tree-id1957 . -51) (undo-tree-id1958 . -51) (undo-tree-id1959 . -51) (undo-tree-id1960 . -51) (undo-tree-id1961 . -51) (undo-tree-id1962 . -51) (undo-tree-id1963 . -51) (undo-tree-id1964 . -51) (undo-tree-id1965 . -52) (undo-tree-id1966 . -52) (undo-tree-id1967 . -52) (undo-tree-id1968 . -52) (undo-tree-id1969 . -52) (undo-tree-id1970 . -52) (undo-tree-id1971 . -52) (undo-tree-id1972 . -52) (undo-tree-id1973 . -52) (undo-tree-id1974 . -53) (undo-tree-id1975 . -53) (undo-tree-id1976 . -53) (undo-tree-id1977 . -53) (undo-tree-id1978 . -53) (undo-tree-id1979 . -53) (undo-tree-id1980 . -53) (undo-tree-id1981 . -53) (undo-tree-id1982 . -53) (undo-tree-id1983 . -54) (undo-tree-id1984 . -54) (undo-tree-id1985 . -54) (undo-tree-id1986 . -54) (undo-tree-id1987 . -54) (undo-tree-id1988 . -54) (undo-tree-id1989 . -54) (undo-tree-id1990 . -54) (undo-tree-id1991 . -54) (undo-tree-id1992 . -55) (undo-tree-id1993 . -55) (undo-tree-id1994 . -55) (undo-tree-id1995 . -55) (undo-tree-id1996 . -55) (undo-tree-id1997 . -55) (undo-tree-id1998 . -55) (undo-tree-id1999 . -55) (undo-tree-id2000 . -55) (undo-tree-id2001 . -56) (undo-tree-id2002 . -56) (undo-tree-id2003 . -56) (undo-tree-id2004 . -56) (undo-tree-id2005 . -56) (undo-tree-id2006 . -56) (undo-tree-id2007 . -56) (undo-tree-id2008 . -56) (undo-tree-id2009 . -56) (undo-tree-id2010 . -57) (undo-tree-id2011 . -57) (undo-tree-id2012 . -57) (undo-tree-id2013 . -57) (undo-tree-id2014 . -57) (undo-tree-id2015 . -57) (undo-tree-id2016 . -57) (undo-tree-id2017 . -57) (undo-tree-id2018 . -57) (undo-tree-id2019 . -56) (undo-tree-id2020 . -56) (undo-tree-id2021 . -56) (undo-tree-id2022 . -56) (undo-tree-id2023 . -56) (undo-tree-id2024 . -56) (undo-tree-id2025 . -56) (undo-tree-id2026 . -56) (undo-tree-id2027 . -56) (undo-tree-id2028 . -56) (undo-tree-id2029 . -56) (undo-tree-id2030 . -56) (undo-tree-id2031 . -56) (undo-tree-id2032 . -56) (undo-tree-id2033 . -56) (undo-tree-id2034 . -56) (undo-tree-id2035 . -56) (undo-tree-id2036 . -56) (undo-tree-id2037 . -56) (undo-tree-id2038 . -56) (undo-tree-id2039 . -56) (undo-tree-id2040 . -56) (undo-tree-id2041 . -56) (undo-tree-id2042 . -56) (undo-tree-id2043 . -56) (undo-tree-id2044 . -56) (undo-tree-id2045 . -56) (undo-tree-id2046 . -56) (undo-tree-id2047 . -56) (undo-tree-id2048 . -56) (undo-tree-id2049 . -56) (undo-tree-id2050 . -56) (undo-tree-id2051 . -56) (undo-tree-id2052 . -56) (undo-tree-id2053 . -56) (undo-tree-id2054 . -56) (undo-tree-id2055 . -56) (undo-tree-id2056 . -56) (undo-tree-id2057 . -58) (undo-tree-id2058 . -58) (undo-tree-id2059 . -58) (undo-tree-id2060 . -58) (undo-tree-id2061 . -58) (undo-tree-id2062 . -58) (undo-tree-id2063 . -58) (undo-tree-id2064 . -58) (undo-tree-id2065 . -58) (undo-tree-id2066 . -58) (undo-tree-id2067 . -58) (undo-tree-id2068 . -58) (undo-tree-id2069 . -58) (undo-tree-id2070 . -58) (undo-tree-id2071 . -58) (undo-tree-id2072 . -1) (undo-tree-id2073 . -2) (undo-tree-id2074 . -3) (undo-tree-id2075 . -3) (undo-tree-id2076 . -3) (undo-tree-id2077 . -3) (undo-tree-id2078 . -3) (undo-tree-id2079 . -3) (undo-tree-id2080 . -3) (undo-tree-id2081 . -3) (undo-tree-id2082 . -3) (undo-tree-id2083 . -3) (undo-tree-id2084 . -3) (undo-tree-id2085 . -3) (undo-tree-id2086 . -3) (undo-tree-id2087 . -3) (undo-tree-id2088 . -3) (undo-tree-id2089 . -3) (undo-tree-id2090 . -3) (undo-tree-id2091 . -3) (undo-tree-id2092 . -3) (undo-tree-id2093 . -3) (undo-tree-id2094 . -3) (undo-tree-id2095 . -3) (undo-tree-id2096 . -3) (undo-tree-id2097 . -3) (undo-tree-id2098 . -3) (undo-tree-id2099 . -3) (undo-tree-id2100 . -3) (undo-tree-id2101 . -3) (undo-tree-id2102 . -3) (undo-tree-id2103 . -58) 1921) nil (25757 59137 41946 914000) 0 nil] [nil nil ((#("| (i,j)                | (i*s_h:i*s_h+f_h-1,j:j*s_w+f_w-1)      |
" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 1 29 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 29 30 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table invisible t) 30 31 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table display ((raise -0.5))) 31 35 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 35 36 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table invisible t) 36 37 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table display ((raise -0.5))) 37 39 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 39 40 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table invisible t) 40 41 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table display ((raise -0.5))) 41 49 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 49 50 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table invisible t) 50 51 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table display ((raise -0.5))) 51 53 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 53 54 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table invisible t) 54 55 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table display ((raise -0.5))) 55 65 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 65 66 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 2211) (undo-tree-id733 . 66) (undo-tree-id734 . -66) (undo-tree-id735 . -66) (2110 . 2211) (#("| Position of a neuron | Connections in the previous layer |
" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 1 60 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 60 61 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 2110) (undo-tree-id736 . 61) (2014 . 2110) (#("|+------------------------------------------------------|
" 0 57 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 57 58 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 2014) (undo-tree-id737 . 1) (undo-tree-id738 . -58) (undo-tree-id739 . -58) (undo-tree-id740 . -58) (undo-tree-id741 . -58) (undo-tree-id742 . -58) (undo-tree-id743 . -58) (undo-tree-id744 . -58) (undo-tree-id745 . -58) (undo-tree-id746 . -58) (undo-tree-id747 . -58) (undo-tree-id748 . -58) (undo-tree-id749 . -58) (undo-tree-id750 . -58) (undo-tree-id751 . -58) (undo-tree-id752 . -58) (undo-tree-id753 . -58) (undo-tree-id754 . -58) (undo-tree-id755 . -58) (undo-tree-id756 . -58) (undo-tree-id757 . -58) (undo-tree-id758 . -58) (undo-tree-id759 . -3) (undo-tree-id760 . -58) (undo-tree-id761 . -58) (undo-tree-id762 . -58) (undo-tree-id763 . -58) (undo-tree-id764 . -58) (undo-tree-id765 . -58) (undo-tree-id766 . -58) (undo-tree-id767 . -58) (undo-tree-id768 . -58) (undo-tree-id769 . -58) (undo-tree-id770 . -58) (undo-tree-id771 . -58) (undo-tree-id772 . -58) (undo-tree-id773 . -58) (undo-tree-id774 . -58) (undo-tree-id775 . -58) (undo-tree-id776 . -58) (undo-tree-id777 . -58) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -2) (undo-tree-id788 . -2) (undo-tree-id789 . -2) (undo-tree-id790 . -2) (undo-tree-id791 . -2) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -2) (undo-tree-id795 . -2) (undo-tree-id796 . -2) (undo-tree-id797 . -2) (undo-tree-id798 . -2) (undo-tree-id799 . -2) (undo-tree-id800 . -2) (undo-tree-id801 . -2) (undo-tree-id802 . -2) (undo-tree-id803 . -2) (undo-tree-id804 . -2) (undo-tree-id805 . -2) (undo-tree-id806 . -2) (undo-tree-id807 . -2) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -3) (undo-tree-id815 . -3) (undo-tree-id816 . -3) (undo-tree-id817 . -3) (undo-tree-id818 . -3) (undo-tree-id819 . -3) (undo-tree-id820 . -3) (undo-tree-id821 . -3) (undo-tree-id822 . -3) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -5) (undo-tree-id833 . -5) (undo-tree-id834 . -5) (undo-tree-id835 . -5) (undo-tree-id836 . -5) (undo-tree-id837 . -5) (undo-tree-id838 . -5) (undo-tree-id839 . -5) (undo-tree-id840 . -5) (undo-tree-id841 . -6) (undo-tree-id842 . -6) (undo-tree-id843 . -6) (undo-tree-id844 . -6) (undo-tree-id845 . -6) (undo-tree-id846 . -6) (undo-tree-id847 . -6) (undo-tree-id848 . -6) (undo-tree-id849 . -6) (undo-tree-id850 . -7) (undo-tree-id851 . -7) (undo-tree-id852 . -7) (undo-tree-id853 . -7) (undo-tree-id854 . -7) (undo-tree-id855 . -7) (undo-tree-id856 . -7) (undo-tree-id857 . -7) (undo-tree-id858 . -7) (undo-tree-id859 . -8) (undo-tree-id860 . -8) (undo-tree-id861 . -8) (undo-tree-id862 . -8) (undo-tree-id863 . -8) (undo-tree-id864 . -8) (undo-tree-id865 . -8) (undo-tree-id866 . -8) (undo-tree-id867 . -8) (undo-tree-id868 . -9) (undo-tree-id869 . -9) (undo-tree-id870 . -9) (undo-tree-id871 . -9) (undo-tree-id872 . -9) (undo-tree-id873 . -9) (undo-tree-id874 . -9) (undo-tree-id875 . -9) (undo-tree-id876 . -9) (undo-tree-id877 . -10) (undo-tree-id878 . -10) (undo-tree-id879 . -10) (undo-tree-id880 . -10) (undo-tree-id881 . -10) (undo-tree-id882 . -10) (undo-tree-id883 . -10) (undo-tree-id884 . -10) (undo-tree-id885 . -10) (undo-tree-id886 . -11) (undo-tree-id887 . -11) (undo-tree-id888 . -11) (undo-tree-id889 . -11) (undo-tree-id890 . -11) (undo-tree-id891 . -11) (undo-tree-id892 . -11) (undo-tree-id893 . -11) (undo-tree-id894 . -11) (undo-tree-id895 . -12) (undo-tree-id896 . -12) (undo-tree-id897 . -12) (undo-tree-id898 . -12) (undo-tree-id899 . -12) (undo-tree-id900 . -12) (undo-tree-id901 . -12) (undo-tree-id902 . -12) (undo-tree-id903 . -12) (undo-tree-id904 . -13) (undo-tree-id905 . -13) (undo-tree-id906 . -13) (undo-tree-id907 . -13) (undo-tree-id908 . -13) (undo-tree-id909 . -13) (undo-tree-id910 . -13) (undo-tree-id911 . -13) (undo-tree-id912 . -13) (undo-tree-id913 . -14) (undo-tree-id914 . -14) (undo-tree-id915 . -14) (undo-tree-id916 . -14) (undo-tree-id917 . -14) (undo-tree-id918 . -14) (undo-tree-id919 . -14) (undo-tree-id920 . -14) (undo-tree-id921 . -14) (undo-tree-id922 . -15) (undo-tree-id923 . -15) (undo-tree-id924 . -15) (undo-tree-id925 . -15) (undo-tree-id926 . -15) (undo-tree-id927 . -15) (undo-tree-id928 . -15) (undo-tree-id929 . -15) (undo-tree-id930 . -15) (undo-tree-id931 . -16) (undo-tree-id932 . -16) (undo-tree-id933 . -16) (undo-tree-id934 . -16) (undo-tree-id935 . -16) (undo-tree-id936 . -16) (undo-tree-id937 . -16) (undo-tree-id938 . -16) (undo-tree-id939 . -16) (undo-tree-id940 . -17) (undo-tree-id941 . -17) (undo-tree-id942 . -17) (undo-tree-id943 . -17) (undo-tree-id944 . -17) (undo-tree-id945 . -17) (undo-tree-id946 . -17) (undo-tree-id947 . -17) (undo-tree-id948 . -17) (undo-tree-id949 . -18) (undo-tree-id950 . -18) (undo-tree-id951 . -18) (undo-tree-id952 . -18) (undo-tree-id953 . -18) (undo-tree-id954 . -18) (undo-tree-id955 . -18) (undo-tree-id956 . -18) (undo-tree-id957 . -18) (undo-tree-id958 . -19) (undo-tree-id959 . -19) (undo-tree-id960 . -19) (undo-tree-id961 . -19) (undo-tree-id962 . -19) (undo-tree-id963 . -19) (undo-tree-id964 . -19) (undo-tree-id965 . -19) (undo-tree-id966 . -19) (undo-tree-id967 . -20) (undo-tree-id968 . -20) (undo-tree-id969 . -20) (undo-tree-id970 . -20) (undo-tree-id971 . -20) (undo-tree-id972 . -20) (undo-tree-id973 . -20) (undo-tree-id974 . -20) (undo-tree-id975 . -20) (undo-tree-id976 . -21) (undo-tree-id977 . -21) (undo-tree-id978 . -21) (undo-tree-id979 . -21) (undo-tree-id980 . -21) (undo-tree-id981 . -21) (undo-tree-id982 . -21) (undo-tree-id983 . -21) (undo-tree-id984 . -21) (undo-tree-id985 . -22) (undo-tree-id986 . -22) (undo-tree-id987 . -22) (undo-tree-id988 . -22) (undo-tree-id989 . -22) (undo-tree-id990 . -22) (undo-tree-id991 . -22) (undo-tree-id992 . -22) (undo-tree-id993 . -22) (undo-tree-id994 . -23) (undo-tree-id995 . -23) (undo-tree-id996 . -23) (undo-tree-id997 . -23) (undo-tree-id998 . -23) (undo-tree-id999 . -23) (undo-tree-id1000 . -23) (undo-tree-id1001 . -23) (undo-tree-id1002 . -23) (undo-tree-id1003 . -24) (undo-tree-id1004 . -24) (undo-tree-id1005 . -24) (undo-tree-id1006 . -24) (undo-tree-id1007 . -24) (undo-tree-id1008 . -24) (undo-tree-id1009 . -24) (undo-tree-id1010 . -24) (undo-tree-id1011 . -24) (undo-tree-id1012 . -25) (undo-tree-id1013 . -25) (undo-tree-id1014 . -25) (undo-tree-id1015 . -25) (undo-tree-id1016 . -25) (undo-tree-id1017 . -25) (undo-tree-id1018 . -25) (undo-tree-id1019 . -25) (undo-tree-id1020 . -25) (undo-tree-id1021 . -26) (undo-tree-id1022 . -26) (undo-tree-id1023 . -26) (undo-tree-id1024 . -26) (undo-tree-id1025 . -26) (undo-tree-id1026 . -26) (undo-tree-id1027 . -26) (undo-tree-id1028 . -26) (undo-tree-id1029 . -26) (undo-tree-id1030 . -27) (undo-tree-id1031 . -27) (undo-tree-id1032 . -27) (undo-tree-id1033 . -27) (undo-tree-id1034 . -27) (undo-tree-id1035 . -27) (undo-tree-id1036 . -27) (undo-tree-id1037 . -27) (undo-tree-id1038 . -27) (undo-tree-id1039 . -28) (undo-tree-id1040 . -28) (undo-tree-id1041 . -28) (undo-tree-id1042 . -28) (undo-tree-id1043 . -28) (undo-tree-id1044 . -28) (undo-tree-id1045 . -28) (undo-tree-id1046 . -28) (undo-tree-id1047 . -28) (undo-tree-id1048 . -29) (undo-tree-id1049 . -29) (undo-tree-id1050 . -29) (undo-tree-id1051 . -29) (undo-tree-id1052 . -29) (undo-tree-id1053 . -29) (undo-tree-id1054 . -29) (undo-tree-id1055 . -29) (undo-tree-id1056 . -29) (undo-tree-id1057 . -30) (undo-tree-id1058 . -30) (undo-tree-id1059 . -30) (undo-tree-id1060 . -30) (undo-tree-id1061 . -30) (undo-tree-id1062 . -30) (undo-tree-id1063 . -30) (undo-tree-id1064 . -30) (undo-tree-id1065 . -30) (undo-tree-id1066 . -31) (undo-tree-id1067 . -31) (undo-tree-id1068 . -31) (undo-tree-id1069 . -31) (undo-tree-id1070 . -31) (undo-tree-id1071 . -31) (undo-tree-id1072 . -31) (undo-tree-id1073 . -31) (undo-tree-id1074 . -31) (undo-tree-id1075 . -32) (undo-tree-id1076 . -32) (undo-tree-id1077 . -32) (undo-tree-id1078 . -32) (undo-tree-id1079 . -32) (undo-tree-id1080 . -32) (undo-tree-id1081 . -32) (undo-tree-id1082 . -32) (undo-tree-id1083 . -32) (undo-tree-id1084 . -33) (undo-tree-id1085 . -33) (undo-tree-id1086 . -33) (undo-tree-id1087 . -33) (undo-tree-id1088 . -33) (undo-tree-id1089 . -33) (undo-tree-id1090 . -33) (undo-tree-id1091 . -33) (undo-tree-id1092 . -33) (undo-tree-id1093 . -34) (undo-tree-id1094 . -34) (undo-tree-id1095 . -34) (undo-tree-id1096 . -34) (undo-tree-id1097 . -34) (undo-tree-id1098 . -34) (undo-tree-id1099 . -34) (undo-tree-id1100 . -34) (undo-tree-id1101 . -34) (undo-tree-id1102 . -35) (undo-tree-id1103 . -35) (undo-tree-id1104 . -35) (undo-tree-id1105 . -35) (undo-tree-id1106 . -35) (undo-tree-id1107 . -35) (undo-tree-id1108 . -35) (undo-tree-id1109 . -35) (undo-tree-id1110 . -35) (undo-tree-id1111 . -36) (undo-tree-id1112 . -36) (undo-tree-id1113 . -36) (undo-tree-id1114 . -36) (undo-tree-id1115 . -36) (undo-tree-id1116 . -36) (undo-tree-id1117 . -36) (undo-tree-id1118 . -36) (undo-tree-id1119 . -36) (undo-tree-id1120 . -37) (undo-tree-id1121 . -37) (undo-tree-id1122 . -37) (undo-tree-id1123 . -37) (undo-tree-id1124 . -37) (undo-tree-id1125 . -37) (undo-tree-id1126 . -37) (undo-tree-id1127 . -37) (undo-tree-id1128 . -37) (undo-tree-id1129 . -38) (undo-tree-id1130 . -38) (undo-tree-id1131 . -38) (undo-tree-id1132 . -38) (undo-tree-id1133 . -38) (undo-tree-id1134 . -38) (undo-tree-id1135 . -38) (undo-tree-id1136 . -38) (undo-tree-id1137 . -38) (undo-tree-id1138 . -39) (undo-tree-id1139 . -39) (undo-tree-id1140 . -39) (undo-tree-id1141 . -39) (undo-tree-id1142 . -39) (undo-tree-id1143 . -39) (undo-tree-id1144 . -39) (undo-tree-id1145 . -39) (undo-tree-id1146 . -39) (undo-tree-id1147 . -40) (undo-tree-id1148 . -40) (undo-tree-id1149 . -40) (undo-tree-id1150 . -40) (undo-tree-id1151 . -40) (undo-tree-id1152 . -40) (undo-tree-id1153 . -40) (undo-tree-id1154 . -40) (undo-tree-id1155 . -40) (undo-tree-id1156 . -41) (undo-tree-id1157 . -41) (undo-tree-id1158 . -41) (undo-tree-id1159 . -41) (undo-tree-id1160 . -41) (undo-tree-id1161 . -41) (undo-tree-id1162 . -41) (undo-tree-id1163 . -41) (undo-tree-id1164 . -41) (undo-tree-id1165 . -42) (undo-tree-id1166 . -42) (undo-tree-id1167 . -42) (undo-tree-id1168 . -42) (undo-tree-id1169 . -42) (undo-tree-id1170 . -42) (undo-tree-id1171 . -42) (undo-tree-id1172 . -42) (undo-tree-id1173 . -42) (undo-tree-id1174 . -43) (undo-tree-id1175 . -43) (undo-tree-id1176 . -43) (undo-tree-id1177 . -43) (undo-tree-id1178 . -43) (undo-tree-id1179 . -43) (undo-tree-id1180 . -43) (undo-tree-id1181 . -43) (undo-tree-id1182 . -43) (undo-tree-id1183 . -44) (undo-tree-id1184 . -44) (undo-tree-id1185 . -44) (undo-tree-id1186 . -44) (undo-tree-id1187 . -44) (undo-tree-id1188 . -44) (undo-tree-id1189 . -44) (undo-tree-id1190 . -44) (undo-tree-id1191 . -44) (undo-tree-id1192 . -45) (undo-tree-id1193 . -45) (undo-tree-id1194 . -45) (undo-tree-id1195 . -45) (undo-tree-id1196 . -45) (undo-tree-id1197 . -45) (undo-tree-id1198 . -45) (undo-tree-id1199 . -45) (undo-tree-id1200 . -45) (undo-tree-id1201 . -46) (undo-tree-id1202 . -46) (undo-tree-id1203 . -46) (undo-tree-id1204 . -46) (undo-tree-id1205 . -46) (undo-tree-id1206 . -46) (undo-tree-id1207 . -46) (undo-tree-id1208 . -46) (undo-tree-id1209 . -46) (undo-tree-id1210 . -47) (undo-tree-id1211 . -47) (undo-tree-id1212 . -47) (undo-tree-id1213 . -47) (undo-tree-id1214 . -47) (undo-tree-id1215 . -47) (undo-tree-id1216 . -47) (undo-tree-id1217 . -47) (undo-tree-id1218 . -47) (undo-tree-id1219 . -48) (undo-tree-id1220 . -48) (undo-tree-id1221 . -48) (undo-tree-id1222 . -48) (undo-tree-id1223 . -48) (undo-tree-id1224 . -48) (undo-tree-id1225 . -48) (undo-tree-id1226 . -48) (undo-tree-id1227 . -48) (undo-tree-id1228 . -49) (undo-tree-id1229 . -49) (undo-tree-id1230 . -49) (undo-tree-id1231 . -49) (undo-tree-id1232 . -49) (undo-tree-id1233 . -49) (undo-tree-id1234 . -49) (undo-tree-id1235 . -49) (undo-tree-id1236 . -49) (undo-tree-id1237 . -50) (undo-tree-id1238 . -50) (undo-tree-id1239 . -50) (undo-tree-id1240 . -50) (undo-tree-id1241 . -50) (undo-tree-id1242 . -50) (undo-tree-id1243 . -50) (undo-tree-id1244 . -50) (undo-tree-id1245 . -50) (undo-tree-id1246 . -51) (undo-tree-id1247 . -51) (undo-tree-id1248 . -51) (undo-tree-id1249 . -51) (undo-tree-id1250 . -51) (undo-tree-id1251 . -51) (undo-tree-id1252 . -51) (undo-tree-id1253 . -51) (undo-tree-id1254 . -51) (undo-tree-id1255 . -52) (undo-tree-id1256 . -52) (undo-tree-id1257 . -52) (undo-tree-id1258 . -52) (undo-tree-id1259 . -52) (undo-tree-id1260 . -52) (undo-tree-id1261 . -52) (undo-tree-id1262 . -52) (undo-tree-id1263 . -52) (undo-tree-id1264 . -53) (undo-tree-id1265 . -53) (undo-tree-id1266 . -53) (undo-tree-id1267 . -53) (undo-tree-id1268 . -53) (undo-tree-id1269 . -53) (undo-tree-id1270 . -53) (undo-tree-id1271 . -53) (undo-tree-id1272 . -53) (undo-tree-id1273 . -54) (undo-tree-id1274 . -54) (undo-tree-id1275 . -54) (undo-tree-id1276 . -54) (undo-tree-id1277 . -54) (undo-tree-id1278 . -54) (undo-tree-id1279 . -54) (undo-tree-id1280 . -54) (undo-tree-id1281 . -54) (undo-tree-id1282 . -55) (undo-tree-id1283 . -55) (undo-tree-id1284 . -55) (undo-tree-id1285 . -55) (undo-tree-id1286 . -55) (undo-tree-id1287 . -55) (undo-tree-id1288 . -55) (undo-tree-id1289 . -55) (undo-tree-id1290 . -55) (undo-tree-id1291 . -56) (undo-tree-id1292 . -56) (undo-tree-id1293 . -56) (undo-tree-id1294 . -56) (undo-tree-id1295 . -56) (undo-tree-id1296 . -56) (undo-tree-id1297 . -56) (undo-tree-id1298 . -56) (undo-tree-id1299 . -56) (undo-tree-id1300 . -57) (undo-tree-id1301 . -57) (undo-tree-id1302 . -57) (undo-tree-id1303 . -57) (undo-tree-id1304 . -57) (undo-tree-id1305 . -57) (undo-tree-id1306 . -57) (undo-tree-id1307 . -57) (undo-tree-id1308 . -57) (undo-tree-id1309 . -56) (undo-tree-id1310 . -56) (undo-tree-id1311 . -56) (undo-tree-id1312 . -56) (undo-tree-id1313 . -56) (undo-tree-id1314 . -56) (undo-tree-id1315 . -56) (undo-tree-id1316 . -56) (undo-tree-id1317 . -56) (undo-tree-id1318 . -56) (undo-tree-id1319 . -56) (undo-tree-id1320 . -56) (undo-tree-id1321 . -56) (undo-tree-id1322 . -56) (undo-tree-id1323 . -56) (undo-tree-id1324 . -56) (undo-tree-id1325 . -56) (undo-tree-id1326 . -56) (undo-tree-id1327 . -56) (undo-tree-id1328 . -56) (undo-tree-id1329 . -56) (undo-tree-id1330 . -56) (undo-tree-id1331 . -56) (undo-tree-id1332 . -56) (undo-tree-id1333 . -56) (undo-tree-id1334 . -56) (undo-tree-id1335 . -56) (undo-tree-id1336 . -56) (undo-tree-id1337 . -56) (undo-tree-id1338 . -56) (undo-tree-id1339 . -56) (undo-tree-id1340 . -56) (undo-tree-id1341 . -56) (undo-tree-id1342 . -56) (undo-tree-id1343 . -56) (undo-tree-id1344 . -56) (undo-tree-id1345 . -56) (undo-tree-id1346 . -56) (undo-tree-id1347 . -58) (undo-tree-id1348 . -58) (undo-tree-id1349 . -58) (undo-tree-id1350 . -58) (undo-tree-id1351 . -58) (undo-tree-id1352 . -58) (undo-tree-id1353 . -58) (undo-tree-id1354 . -58) (undo-tree-id1355 . -58) (undo-tree-id1356 . -58) (undo-tree-id1357 . -58) (undo-tree-id1358 . -58) (undo-tree-id1359 . -58) (undo-tree-id1360 . -58) (undo-tree-id1361 . -58) (undo-tree-id1362 . -1) (undo-tree-id1363 . -2) (undo-tree-id1364 . -3) (undo-tree-id1365 . -3) (undo-tree-id1366 . -3) (undo-tree-id1367 . -3) (undo-tree-id1368 . -3) (undo-tree-id1369 . -3) (undo-tree-id1370 . -3) (undo-tree-id1371 . -3) (undo-tree-id1372 . -3) (undo-tree-id1373 . -3) (undo-tree-id1374 . -3) (1918 . 2014) 1921) ((#("| +------------------------------------------------------ |                                   |
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 1 2 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 2 57 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 57 58 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 58 59 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 59 60 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 60 93 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 93 94 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 94 95 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 95 96 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1918) (undo-tree-id1442 . 36) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (2014 . 2072) (#("| Position of a neuron                                    | Connections in the previous layer |
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 1 2 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 2 22 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 22 57 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 57 58 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 58 59 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 59 60 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 60 93 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 93 94 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 94 95 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 95 96 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 2014) (2110 . 2171) (#("| (i,j)                                                   | (i*s_h:i*s_h+f_h-1,j:j*s_w+f_w-1)      |
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 1 2 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 2 7 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 7 57 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 57 58 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 58 59 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 59 60 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 60 64 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 64 65 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table invisible t) 65 66 (display ((raise -0.5)) wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 66 70 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 70 71 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table invisible t) 71 72 (display ((raise -0.5)) wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 72 74 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 74 75 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table invisible t) 75 76 (display ((raise -0.5)) wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 76 84 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 84 85 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table invisible t) 85 86 (display ((raise -0.5)) wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 86 88 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 88 89 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table invisible t) 89 90 (display ((raise -0.5)) wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 90 93 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t face org-table) 93 98 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 98 99 (display (space :relative-width 1) fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 99 100 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face org-table) 100 101 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 2110) (2211 . 2277)) (25757 59134 271531 770000) 0 nil])
([nil nil ((#("** Filters (Convolutional Kernel) 
A neuron's weights can be represented as a small image the size of the
receptive field, called *filters* or *convolution kernels*. 
Thus, a layer full of neurons using the same filter outputs a *feature map*, 
which highlights the areas in an image that activate the filter the most. 

You do not have to define the filters manually. 
During training the convolutional layer will automatically learn the most useful
filters for its task, and the layers above will learn to combine them into more
complex patterns.

In reality a convolutional layer has multiple filters and outputs 
*one feature map per filter*. 

It has one neuron per pixel in each feature map, 

All neurons within a given feature map share the same parameters. 

A neuronâ€™s receptive field is the same as described earlier, but it extends
across all the previous layersâ€™ feature maps. 

A convolutional layer simultaneously applies multiple trainable
filters to its inputs, making it capable of detecting multiple features anywhere
in its inputs.

The fact that all neurons in a feature map share the same parameters dramatically
reduces the number of parameters in the model. 

Once the CNN has learned to recognize a pattern in one location, it can
recognize it in any other location.

|------------------------+----------------------------------|
| layer l, feature map k | layer l-1                        |
|------------------------+----------------------------------|
| (i,j)                  | (ixs_h:ixs_h+f_h-1, jxs_w:jxs_w+f_w-1) |
|------------------------+----------------------------------|

" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-hide keymap (keymap)) 1 2 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) composition (2 1 [9679]) keymap (keymap) face org-level-2) 2 3 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) keymap (keymap) face org-level-2) 3 34 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2) 34 35 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent))) 35 106 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 106 130 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 130 131 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 131 138 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t) 138 139 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 139 143 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 143 144 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 144 163 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t) 163 164 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 164 167 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 167 229 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 229 230 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 230 241 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t) 241 242 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 242 245 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 245 320 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 320 321 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 321 370 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 370 451 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 451 499 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 499 531 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 531 549 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 549 550 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 550 617 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 617 648 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 648 649 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 649 699 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 699 700 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 700 767 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 767 768 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 768 844 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 844 891 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 891 892 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 892 956 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 956 1037 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1037 1052 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1052 1053 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1053 1135 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1135 1183 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1183 1184 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1184 1256 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1256 1292 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1292 1293 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1293 1355 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1355 1417 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1417 1479 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1479 1547 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1547 1609 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent))) 1609 1610 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 2105) (undo-tree-id2104 . -34) (undo-tree-id2105 . -1609) (undo-tree-id2106 . -1609) (undo-tree-id2107 . -11) (undo-tree-id2108 . -3) (undo-tree-id2109 . -3) (undo-tree-id2110 . -3) (undo-tree-id2111 . -3) (undo-tree-id2112 . -3) (undo-tree-id2113 . -3) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) (undo-tree-id2116 . 1599) (undo-tree-id2117 . -12) (undo-tree-id2118 . 1578) (undo-tree-id2119 . -33) (undo-tree-id2120 . -11) (undo-tree-id2121 . -11) (undo-tree-id2122 . -11) (undo-tree-id2123 . -11) (undo-tree-id2124 . -11) (undo-tree-id2125 . -11) (undo-tree-id2126 . -11) (undo-tree-id2127 . -11) (undo-tree-id2128 . -11) (undo-tree-id2129 . -11) (undo-tree-id2130 . -1610) 2116 (t 25757 59137 52302 782000)) nil (25757 59199 781434 302000) 0 nil])
nil
([nil nil ((2414 . 2416) (2413 . 2414) (t 25757 59199 838872 272000)) nil (25757 59280 282991 218000) 0 nil])
([nil nil ((#("One option is to " 0 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2416) (undo-tree-id2244 . -16) (undo-tree-id2245 . 17) (undo-tree-id2246 . -16) (undo-tree-id2247 . -16) (undo-tree-id2248 . -16) (undo-tree-id2249 . -17) (undo-tree-id2250 . -16) (undo-tree-id2251 . -2) (undo-tree-id2252 . -9) (undo-tree-id2253 . -12) (undo-tree-id2254 . -15) (undo-tree-id2255 . -16) (undo-tree-id2256 . -16) (undo-tree-id2257 . -17) 2432) nil (25757 59280 282989 99000) 0 nil])
([nil nil ((2416 . 2417) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2416) (undo-tree-id2241 . 1) (undo-tree-id2242 . 1) (undo-tree-id2243 . -1)) nil (25757 59280 282979 744000) 0 nil])
([nil nil ((2421 . 2424) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2421) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) 2422) nil (25757 59280 282976 520000) 0 nil])
([nil nil ((2424 . 2425) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2424) (undo-tree-id2212 . 1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) 2423) nil (25757 59280 282967 53000) 0 nil])
([nil nil ((#("By decreasing the number of" 0 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2472) (undo-tree-id2209 . -26) (undo-tree-id2210 . -27) (undo-tree-id2211 . -27)) nil (25757 59280 282955 387000) 0 nil])
([nil nil ((#("examples processed in each iteration, you can mitigate memory constraints." 0 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2473) (undo-tree-id2206 . -73) (undo-tree-id2207 . -74) (undo-tree-id2208 . -74)) nil (25757 59280 282952 375000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2473) (undo-tree-id2205 . -1)) nil (25757 59280 282949 489000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2473) (undo-tree-id2204 . -1)) nil (25757 59280 282948 224000) 0 nil])
([nil nil ((2473 . 2475) (#("Another strategy is to " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 16 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2473) (undo-tree-id2181 . -22) (undo-tree-id2182 . -22) (undo-tree-id2183 . -22) (undo-tree-id2184 . -22) (undo-tree-id2185 . -23) (undo-tree-id2186 . -22) (undo-tree-id2187 . -6) (undo-tree-id2188 . -6) (undo-tree-id2189 . -6) (undo-tree-id2190 . -6) (undo-tree-id2191 . -6) (undo-tree-id2192 . -6) (undo-tree-id2193 . -6) (undo-tree-id2194 . -6) (undo-tree-id2195 . -15) (undo-tree-id2196 . -18) (undo-tree-id2197 . -21) (undo-tree-id2198 . -23) (undo-tree-id2199 . -22) (undo-tree-id2200 . -22) (undo-tree-id2201 . -23) (undo-tree-id2202 . -23) (undo-tree-id2203 . -23) 2495) nil (25757 59280 282946 73000) 0 nil])
([nil nil ((2475 . 2476) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2475)) nil (25757 59280 282931 208000) 0 nil])
([nil nil ((2480 . 2483) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2480) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1)) nil (25757 59280 282930 31000) 0 nil])
([nil nil ((2518 . 2520) (2517 . 2518) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2517) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1)) nil (25757 59280 282925 993000) 0 nil])
([nil nil ((#("This can be
achieved by " 0 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 12 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2521) (undo-tree-id2138 . -23) (undo-tree-id2139 . -23) (undo-tree-id2140 . -23) (undo-tree-id2141 . -23) (undo-tree-id2142 . -24) (undo-tree-id2143 . -23) (undo-tree-id2144 . -3) (undo-tree-id2145 . -7) (undo-tree-id2146 . -10) (undo-tree-id2147 . -19) (undo-tree-id2148 . -19) (undo-tree-id2149 . -19) (undo-tree-id2150 . -19) (undo-tree-id2151 . -19) (undo-tree-id2152 . -19) (undo-tree-id2153 . -19) (undo-tree-id2154 . -19) (undo-tree-id2155 . -22) (undo-tree-id2156 . -22) (undo-tree-id2157 . -22) (undo-tree-id2158 . -22) (undo-tree-id2159 . -22) (undo-tree-id2160 . -22) (undo-tree-id2161 . -22) (undo-tree-id2162 . -22) (undo-tree-id2163 . -23) (undo-tree-id2164 . -23) (undo-tree-id2165 . -23) (undo-tree-id2166 . -23) (undo-tree-id2167 . -23) (undo-tree-id2168 . -23) (undo-tree-id2169 . -23) (undo-tree-id2170 . -23) (undo-tree-id2171 . -23) (undo-tree-id2172 . -24) 2544) nil (25757 59280 282920 188000) 0 nil])
([nil nil ((#(", which decreases the spatial resolution of" 0 43 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2539) (undo-tree-id2135 . -42) (undo-tree-id2136 . -43) (undo-tree-id2137 . -43)) nil (25757 59280 282721 606000) 0 nil])
([nil nil ((#("feature maps, or by removing a few layers from the architecture. Both methods
" 0 78 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2540) (undo-tree-id2133 . -77) (undo-tree-id2134 . -78)) nil (25757 59280 282718 209000) 0 nil])
([nil nil ((#("help reduce the memory requirements.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 37 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2540) (undo-tree-id2131 . -36) (undo-tree-id2132 . -37)) nil (25757 59280 282712 351000) 0 nil])
([nil nil ((2540 . 2542) (t 25757 59280 293333 998000)) nil (25757 59296 710088 808000) 0 nil])
([nil nil ((2541 . 2542) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2541) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2542) (undo-tree-id2275 . 1) (undo-tree-id2276 . -1) 2541) nil (25757 59296 710086 725000) 0 nil])
([nil nil ((#("precision is another potential solution. This reduces the memory footprint of" 0 77 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2614) (undo-tree-id2261 . -76) (undo-tree-id2262 . -77) (undo-tree-id2263 . -77)) nil (25757 59296 710074 758000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2614) (undo-tree-id2260 . -1)) nil (25757 59296 710070 855000) 0 nil])
([nil nil ((#("the network at the cost of some loss in numerical precision.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2614) (undo-tree-id2258 . -60) (undo-tree-id2259 . -61)) nil (25757 59296 710065 787000) 0 nil])
([nil nil ((2614 . 2616) (t 25757 59296 765055 835000)) nil (25757 59310 785559 873000) 0 nil])
([nil nil ((2615 . 2616) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2615) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2616) (undo-tree-id2306 . 1) (undo-tree-id2307 . -1) 2615 (t 25757 59310 796828 36000)) nil (25757 59327 452376 810000) 0 nil])
([nil nil ((2616 . 2617) (#("Alternatively, if available, you can d" 0 38 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2616) (undo-tree-id2285 . -37) (undo-tree-id2286 . 38) (undo-tree-id2287 . -37) (undo-tree-id2288 . -37) (undo-tree-id2289 . -37) (undo-tree-id2290 . -38) (undo-tree-id2291 . -37) (undo-tree-id2292 . -12) (undo-tree-id2293 . -13) (undo-tree-id2294 . -16) (undo-tree-id2295 . -26) (undo-tree-id2296 . -27) (undo-tree-id2297 . -31) (undo-tree-id2298 . -35) (undo-tree-id2299 . -37) (undo-tree-id2300 . -37) (undo-tree-id2301 . -38) (undo-tree-id2302 . -38) (undo-tree-id2303 . -38) 2653) nil (25757 59327 452372 548000) 0 nil])
([nil nil ((2625 . 2628) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2625) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1)) nil (25757 59327 452358 631000) 0 nil])
([nil nil ((2652 . 2653) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -2652) (undo-tree-id2280 . -1) 2627) nil (25757 59327 452626 153000) 0 nil])
([nil nil ((#("This approach allows you to utilize the memory resources of multiple" 0 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 17 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2662) (undo-tree-id2310 . -67) (undo-tree-id2311 . -68) (undo-tree-id2312 . -68)) nil (25757 59335 520941 165000) 0 nil] [nil nil ((#("This approach allows you to utilize the memory resources of multiple" 0 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 17 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 2662) (undo-tree-id2277 . -67) (undo-tree-id2278 . -68) (undo-tree-id2279 . -68)) ((2662 . 2730)) (25757 59327 452349 449000) 0 nil])
([nil nil ((#("hardware devices in parallel, alleviating the memory limitations.
" 0 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2663) (undo-tree-id2308 . -65) (undo-tree-id2309 . -66)) nil (25757 59335 520931 925000) 0 nil])
nil
([nil nil ((#("By employing these techniques, you can tackle out-of-memory errors during
" 0 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2664) (undo-tree-id2315 . -73) (undo-tree-id2316 . -74) (t 25757 59335 532446 283000)) nil (25757 59342 999137 31000) 0 nil])
([nil nil ((#("training and continue the optimization process of your CNN.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2664) (undo-tree-id2313 . -59) (undo-tree-id2314 . -60)) nil (25757 59342 999130 932000) 0 nil])
([nil nil ((2680 . 2681) (t 25757 59343 12335 668000) 2666) nil (25757 59349 678228 843000) 0 nil])
([nil nil ((2811 . 2813) (t 25757 59349 688238 796000)) nil (25757 59385 671450 262000) 0 nil])
([nil nil ((2841 . 2842) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2841) (undo-tree-id2382 . -1) 2813 (t 25757 59385 683745 498000)) nil (25757 59405 177874 43000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -2890) (nil fontified nil 2889 . 2890) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2889 . 2890) (2889 . 2890) 2841) nil (25757 59405 177870 415000) 0 nil])
([nil nil ((2982 . 2983) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2982) (undo-tree-id2379 . -1) (2913 . 2914) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -2913) (undo-tree-id2380 . 1) (undo-tree-id2381 . -1) 2890) nil (25757 59405 177867 738000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -3052) (nil fontified nil 3051 . 3052) (nil wrap-prefix #("  " 0 2 (face org-indent)) 3051 . 3052) (3051 . 3052) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -2971) (nil fontified nil 2970 . 2971) (nil wrap-prefix #("  " 0 2 (face org-indent)) 2970 . 2971) (2970 . 2971) 2982) nil (25757 59405 177861 888000) 0 nil])
([nil nil ((2994 . 2996)) nil (25757 59405 177859 787000) 0 nil])
([nil nil ((2996 . 2997) (#("It's important to note that" 0 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 2996) (undo-tree-id2356 . -26) (undo-tree-id2357 . 27) (undo-tree-id2358 . -26) (undo-tree-id2359 . -26) (undo-tree-id2360 . -26) (undo-tree-id2361 . -27) (undo-tree-id2362 . -26) (undo-tree-id2363 . -3) (undo-tree-id2364 . -3) (undo-tree-id2365 . -3) (undo-tree-id2366 . -3) (undo-tree-id2367 . -3) (undo-tree-id2368 . -3) (undo-tree-id2369 . -3) (undo-tree-id2370 . -3) (undo-tree-id2371 . -13) (undo-tree-id2372 . -16) (undo-tree-id2373 . -21) (undo-tree-id2374 . -26) (undo-tree-id2375 . -26) (undo-tree-id2376 . -27) (undo-tree-id2377 . -27) (undo-tree-id2378 . -27) 3022) nil (25757 59405 177857 611000) 0 nil])
([nil nil ((3027 . 3028) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -3027) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) 2996) nil (25757 59405 177838 285000) 0 nil])
([nil nil ((#("This means that the layer's output remains" 0 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3156) (undo-tree-id2385 . -41) (undo-tree-id2386 . -5) (undo-tree-id2387 . -42) (undo-tree-id2388 . -42) (t 25757 59405 187497 865000)) nil (25757 59425 857473 777000) 0 nil])
([nil nil ((#("relatively unchanged even if the input undergoes slight shifts in position.
" 0 76 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3157) (undo-tree-id2383 . -75) (undo-tree-id2384 . -76)) nil (25757 59425 857467 644000) 0 nil])
([nil nil ((#("This means that the network becomes less sensitive" 0 50 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3334) (undo-tree-id2391 . -49) (undo-tree-id2392 . -50) (undo-tree-id2393 . -50) (t 25757 59425 867249 664000)) nil (25757 59457 751022 430000) 0 nil])
([nil nil ((#("to small positional variations of features.
" 0 44 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3335) (undo-tree-id2389 . -43) (undo-tree-id2390 . -44)) nil (25757 59457 751015 727000) 0 nil])
([nil nil ((2996 . 2998) (t 25757 59457 762894 496000)) nil (25757 59552 28054 698000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3039) (undo-tree-id2697 . -1)) nil (25757 59552 28053 260000) 0 nil])
([nil nil ((3039 . 3041)) nil (25757 59552 28051 668000) 0 nil])
([nil nil ((3041 . 3042) (#("In addition to its connectivity pattern, a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 42 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3041) (undo-tree-id2669 . -41) (undo-tree-id2670 . 42) (undo-tree-id2671 . -41) (undo-tree-id2672 . -41) (undo-tree-id2673 . -41) (undo-tree-id2674 . -8) (undo-tree-id2675 . -8) (undo-tree-id2676 . -8) (undo-tree-id2677 . -8) (undo-tree-id2678 . -8) (undo-tree-id2679 . -8) (undo-tree-id2680 . -8) (undo-tree-id2681 . -8) (undo-tree-id2682 . -42) (undo-tree-id2683 . -41) (undo-tree-id2684 . -1) (undo-tree-id2685 . -10) (undo-tree-id2686 . -13) (undo-tree-id2687 . -17) (undo-tree-id2688 . -30) (undo-tree-id2689 . -38) (undo-tree-id2690 . -39) (undo-tree-id2691 . -40) (undo-tree-id2692 . -41) (undo-tree-id2693 . -41) (undo-tree-id2694 . -42) (undo-tree-id2695 . -42) (undo-tree-id2696 . -42) 3082) nil (25757 59552 28049 720000) 0 nil])
([nil nil ((3080 . 3081) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3080) (undo-tree-id2668 . -1) 3041) nil (25757 59552 28027 682000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3119) (undo-tree-id2666 . 1) (undo-tree-id2667 . -1)) nil (25757 59552 28024 979000) 0 nil])
([nil nil ((3119 . 3121)) nil (25757 59552 28022 132000) 0 nil])
([nil nil ((#("at regular intervals within a CNN
architecture, it becomes possible to" 0 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 34 70 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3157) (undo-tree-id2577 . -69) (undo-tree-id2578 . -69) (undo-tree-id2579 . -69) (undo-tree-id2580 . -69) (undo-tree-id2581 . -42) (undo-tree-id2582 . -42) (undo-tree-id2583 . -42) (undo-tree-id2584 . -42) (undo-tree-id2585 . -42) (undo-tree-id2586 . -42) (undo-tree-id2587 . -42) (undo-tree-id2588 . -42) (undo-tree-id2589 . -37) (undo-tree-id2590 . -37) (undo-tree-id2591 . -37) (undo-tree-id2592 . -37) (undo-tree-id2593 . -37) (undo-tree-id2594 . -37) (undo-tree-id2595 . -37) (undo-tree-id2596 . -37) (undo-tree-id2597 . -46) (undo-tree-id2598 . -46) (undo-tree-id2599 . -46) (undo-tree-id2600 . -46) (undo-tree-id2601 . -46) (undo-tree-id2602 . -46) (undo-tree-id2603 . -46) (undo-tree-id2604 . -46) (undo-tree-id2605 . -1) (undo-tree-id2606 . -9) (undo-tree-id2607 . -3) (undo-tree-id2608 . -70) (undo-tree-id2609 . -69) (undo-tree-id2610 . -1) (undo-tree-id2611 . -9) (undo-tree-id2612 . -19) (undo-tree-id2613 . -26) (undo-tree-id2614 . -28) (undo-tree-id2615 . -32) (undo-tree-id2616 . -45) (undo-tree-id2617 . -45) (undo-tree-id2618 . -45) (undo-tree-id2619 . -45) (undo-tree-id2620 . -45) (undo-tree-id2621 . -45) (undo-tree-id2622 . -45) (undo-tree-id2623 . -45) (undo-tree-id2624 . -46) (undo-tree-id2625 . -46) (undo-tree-id2626 . -46) (undo-tree-id2627 . -46) (undo-tree-id2628 . -46) (undo-tree-id2629 . -46) (undo-tree-id2630 . -46) (undo-tree-id2631 . -46) (undo-tree-id2632 . -49) (undo-tree-id2633 . -49) (undo-tree-id2634 . -49) (undo-tree-id2635 . -49) (undo-tree-id2636 . -49) (undo-tree-id2637 . -49) (undo-tree-id2638 . -49) (undo-tree-id2639 . -49) (undo-tree-id2640 . -57) (undo-tree-id2641 . -57) (undo-tree-id2642 . -57) (undo-tree-id2643 . -57) (undo-tree-id2644 . -57) (undo-tree-id2645 . -57) (undo-tree-id2646 . -57) (undo-tree-id2647 . -57) (undo-tree-id2648 . -66) (undo-tree-id2649 . -66) (undo-tree-id2650 . -66) (undo-tree-id2651 . -66) (undo-tree-id2652 . -66) (undo-tree-id2653 . -66) (undo-tree-id2654 . -66) (undo-tree-id2655 . -66) (undo-tree-id2656 . -69) (undo-tree-id2657 . -69) (undo-tree-id2658 . -69) (undo-tree-id2659 . -69) (undo-tree-id2660 . -69) (undo-tree-id2661 . -69) (undo-tree-id2662 . -69) (undo-tree-id2663 . -69) (undo-tree-id2664 . -69) (undo-tree-id2665 . -70) 3226) nil (25757 59552 28018 339000) 0 nil])
([nil nil ((3166 . 3169) (3163 . 3166) (3157 . 3163) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3157) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) 3158 (3156 . 3158) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3156) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) 3157) nil (25757 59552 27853 541000) 0 nil])
([nil nil ((3197 . 3198)) nil (25757 59552 27216 427000) 0 nil])
([nil nil ((3198 . 3201)) nil (25757 59552 27215 343000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 3200) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1)) nil (25757 59552 27213 390000) 0 nil])
([nil nil ((3211 . 3212) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3211) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) 3200) nil (25757 59552 27201 739000) 0 nil])
([nil nil ((3222 . 3223) (t 25757 59552 86022 764000)) nil (25757 59619 470174 978000) 0 nil])
([nil nil ((#("on a larger scale. " 0 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3224) (undo-tree-id3188 . -18) (undo-tree-id3189 . -19) (undo-tree-id3190 . -19)) nil (25757 59619 470173 398000) 0 nil])
([nil nil ((3119 . 3226) (#("- 
- By incorporating max pooling layers, possible to achieve a certain level of 
  translation invariance." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 47 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 47 53 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 53 82 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 82 84 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 84 95 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 95 96 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 96 107 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3119) (undo-tree-id2815 . -107) (undo-tree-id2816 . -107) (undo-tree-id2817 . -40) (undo-tree-id2818 . -40) (undo-tree-id2819 . 54) (undo-tree-id2820 . -40) (undo-tree-id2821 . -40) (undo-tree-id2822 . -53) (undo-tree-id2823 . -40) (undo-tree-id2824 . -40) (undo-tree-id2825 . -40) (undo-tree-id2826 . -40) (undo-tree-id2827 . -40) (undo-tree-id2828 . -40) (undo-tree-id2829 . -40) (undo-tree-id2830 . -40) (undo-tree-id2831 . 102) (undo-tree-id2832 . -40) (undo-tree-id2833 . -40) (undo-tree-id2834 . -40) (undo-tree-id2835 . -40) (undo-tree-id2836 . -40) (undo-tree-id2837 . -40) (undo-tree-id2838 . -40) (undo-tree-id2839 . -40) (undo-tree-id2840 . -40) (undo-tree-id2841 . -40) (undo-tree-id2842 . -40) (undo-tree-id2843 . -40) (undo-tree-id2844 . -40) (undo-tree-id2845 . -40) (undo-tree-id2846 . -40) (undo-tree-id2847 . -40) (undo-tree-id2848 . -5) (undo-tree-id2849 . -40) (undo-tree-id2850 . -40) (undo-tree-id2851 . -40) (undo-tree-id2852 . -40) (undo-tree-id2853 . -40) (undo-tree-id2854 . -40) (undo-tree-id2855 . -40) (undo-tree-id2856 . -40) (undo-tree-id2857 . -40) (undo-tree-id2858 . -40) (undo-tree-id2859 . -40) (undo-tree-id2860 . -40) (undo-tree-id2861 . -40) (undo-tree-id2862 . -40) (undo-tree-id2863 . -40) (undo-tree-id2864 . -40) (undo-tree-id2865 . -40) (undo-tree-id2866 . -40) (undo-tree-id2867 . -40) (undo-tree-id2868 . -40) (undo-tree-id2869 . -40) (undo-tree-id2870 . -40) (undo-tree-id2871 . -40) (undo-tree-id2872 . -40) (undo-tree-id2873 . -40) (undo-tree-id2874 . -40) (undo-tree-id2875 . -40) (undo-tree-id2876 . -40) (undo-tree-id2877 . -40) (undo-tree-id2878 . -40) (undo-tree-id2879 . -40) (undo-tree-id2880 . -40) (undo-tree-id2881 . -40) (undo-tree-id2882 . -40) (undo-tree-id2883 . -40) (undo-tree-id2884 . -40) (undo-tree-id2885 . -40) (undo-tree-id2886 . -40) (undo-tree-id2887 . -40) (undo-tree-id2888 . -40) (undo-tree-id2889 . -40) (undo-tree-id2890 . -40) (undo-tree-id2891 . -40) (undo-tree-id2892 . -40) (undo-tree-id2893 . -40) (undo-tree-id2894 . -40) (undo-tree-id2895 . -40) (undo-tree-id2896 . -40) (undo-tree-id2897 . -40) (undo-tree-id2898 . -40) (undo-tree-id2899 . -40) (undo-tree-id2900 . -40) (undo-tree-id2901 . -40) (undo-tree-id2902 . -40) (undo-tree-id2903 . -40) (undo-tree-id2904 . -40) (undo-tree-id2905 . -40) (undo-tree-id2906 . -40) (undo-tree-id2907 . -40) (undo-tree-id2908 . -40) (undo-tree-id2909 . -40) (undo-tree-id2910 . -40) (undo-tree-id2911 . -40) (undo-tree-id2912 . -40) (undo-tree-id2913 . -40) (undo-tree-id2914 . -40) (undo-tree-id2915 . -40) (undo-tree-id2916 . -40) (undo-tree-id2917 . -40) (undo-tree-id2918 . -40) (undo-tree-id2919 . -40) (undo-tree-id2920 . -40) (undo-tree-id2921 . -40) (undo-tree-id2922 . -40) (undo-tree-id2923 . -40) (undo-tree-id2924 . -40) (undo-tree-id2925 . -40) (undo-tree-id2926 . -40) (undo-tree-id2927 . -40) (undo-tree-id2928 . -40) (undo-tree-id2929 . -40) (undo-tree-id2930 . -40) (undo-tree-id2931 . -40) (undo-tree-id2932 . -40) (undo-tree-id2933 . -40) (undo-tree-id2934 . -40) (undo-tree-id2935 . -40) (undo-tree-id2936 . -40) (undo-tree-id2937 . -40) (undo-tree-id2938 . -40) (undo-tree-id2939 . -40) (undo-tree-id2940 . -40) (undo-tree-id2941 . -41) (undo-tree-id2942 . -41) (undo-tree-id2943 . -41) (undo-tree-id2944 . -41) (undo-tree-id2945 . -41) (undo-tree-id2946 . -41) (undo-tree-id2947 . -41) (undo-tree-id2948 . -41) (undo-tree-id2949 . -41) (undo-tree-id2950 . -41) (undo-tree-id2951 . -41) (undo-tree-id2952 . -41) (undo-tree-id2953 . -41) (undo-tree-id2954 . -41) (undo-tree-id2955 . -41) (undo-tree-id2956 . -41) (undo-tree-id2957 . -41) (undo-tree-id2958 . -41) (undo-tree-id2959 . -41) (undo-tree-id2960 . -41) (undo-tree-id2961 . -41) (undo-tree-id2962 . -41) (undo-tree-id2963 . -41) (undo-tree-id2964 . -41) (undo-tree-id2965 . -41) (undo-tree-id2966 . -41) (undo-tree-id2967 . -41) (undo-tree-id2968 . -41) (undo-tree-id2969 . -41) (undo-tree-id2970 . -41) (undo-tree-id2971 . -41) (undo-tree-id2972 . -41) (undo-tree-id2973 . -41) (undo-tree-id2974 . -41) (undo-tree-id2975 . -41) (undo-tree-id2976 . -41) (undo-tree-id2977 . -95) (undo-tree-id2978 . -95) (undo-tree-id2979 . -95) (undo-tree-id2980 . -95) (undo-tree-id2981 . -95) (undo-tree-id2982 . -95) (undo-tree-id2983 . -95) (undo-tree-id2984 . -95) (undo-tree-id2985 . -84) (undo-tree-id2986 . -84) (undo-tree-id2987 . -84) (undo-tree-id2988 . -84) (undo-tree-id2989 . -84) (undo-tree-id2990 . -84) (undo-tree-id2991 . -84) (undo-tree-id2992 . -84) (undo-tree-id2993 . -84) (undo-tree-id2994 . -95) (undo-tree-id2995 . -95) (undo-tree-id2996 . -95) (undo-tree-id2997 . -95) (undo-tree-id2998 . -95) (undo-tree-id2999 . -95) (undo-tree-id3000 . -95) (undo-tree-id3001 . -95) (undo-tree-id3002 . -95) (undo-tree-id3003 . -95) (undo-tree-id3004 . -95) (undo-tree-id3005 . -95) (undo-tree-id3006 . -95) (undo-tree-id3007 . -95) (undo-tree-id3008 . -95) (undo-tree-id3009 . -95) (undo-tree-id3010 . -95) (undo-tree-id3011 . -95) (undo-tree-id3012 . -16) (undo-tree-id3013 . -16) (undo-tree-id3014 . -16) (undo-tree-id3015 . -16) (undo-tree-id3016 . -16) (undo-tree-id3017 . -16) (undo-tree-id3018 . -16) (undo-tree-id3019 . -16) (undo-tree-id3020 . -22) (undo-tree-id3021 . -26) (undo-tree-id3022 . -32) (undo-tree-id3023 . -39) (undo-tree-id3024 . -40) (undo-tree-id3025 . -49) (undo-tree-id3026 . -52) (undo-tree-id3027 . -60) (undo-tree-id3028 . -62) (undo-tree-id3029 . -70) (undo-tree-id3030 . -76) (undo-tree-id3031 . -79) (undo-tree-id3032 . -94) (undo-tree-id3033 . -94) (undo-tree-id3034 . -94) (undo-tree-id3035 . -94) (undo-tree-id3036 . -94) (undo-tree-id3037 . -94) (undo-tree-id3038 . -94) (undo-tree-id3039 . -94) (undo-tree-id3040 . -94) (undo-tree-id3041 . -94) (undo-tree-id3042 . -94) (undo-tree-id3043 . -94) (undo-tree-id3044 . -94) (undo-tree-id3045 . -94) (undo-tree-id3046 . -94) (undo-tree-id3047 . -15) (undo-tree-id3048 . -15) (undo-tree-id3049 . -15) (undo-tree-id3050 . -15) (undo-tree-id3051 . -15) (undo-tree-id3052 . -15) (undo-tree-id3053 . -15) (undo-tree-id3054 . -15) (undo-tree-id3055 . -94) (undo-tree-id3056 . -94) (undo-tree-id3057 . -94) (undo-tree-id3058 . -94) (undo-tree-id3059 . -94) (undo-tree-id3060 . -94) (undo-tree-id3061 . -94) (undo-tree-id3062 . -94) (undo-tree-id3063 . -94) (undo-tree-id3064 . -94) (undo-tree-id3065 . -94) (undo-tree-id3066 . -94) (undo-tree-id3067 . -94) (undo-tree-id3068 . -94) (undo-tree-id3069 . -94) (undo-tree-id3070 . -94) (undo-tree-id3071 . -94) (undo-tree-id3072 . -94) (undo-tree-id3073 . -94) (undo-tree-id3074 . -94) (undo-tree-id3075 . -94) (undo-tree-id3076 . -94) (undo-tree-id3077 . -94) (undo-tree-id3078 . -94) (undo-tree-id3079 . -94) (undo-tree-id3080 . -94) (undo-tree-id3081 . -94) (undo-tree-id3082 . -94) (undo-tree-id3083 . -94) (undo-tree-id3084 . -94) (undo-tree-id3085 . -94) (undo-tree-id3086 . -94) (undo-tree-id3087 . -94) (undo-tree-id3088 . -94) (undo-tree-id3089 . -94) (undo-tree-id3090 . -94) (undo-tree-id3091 . -94) (undo-tree-id3092 . -94) (undo-tree-id3093 . -94) (undo-tree-id3094 . -15) (undo-tree-id3095 . -15) (undo-tree-id3096 . -15) (undo-tree-id3097 . -15) (undo-tree-id3098 . -15) (undo-tree-id3099 . -15) (undo-tree-id3100 . -15) (undo-tree-id3101 . -15) (undo-tree-id3102 . -22) (undo-tree-id3103 . -26) (undo-tree-id3104 . -34) (undo-tree-id3105 . -40) (undo-tree-id3106 . -42) (undo-tree-id3107 . -51) (undo-tree-id3108 . -54) (undo-tree-id3109 . -62) (undo-tree-id3110 . -64) (undo-tree-id3111 . -72) (undo-tree-id3112 . -78) (undo-tree-id3113 . -84) (undo-tree-id3114 . -84) (undo-tree-id3115 . -84) (undo-tree-id3116 . -84) (undo-tree-id3117 . -84) (undo-tree-id3118 . -84) (undo-tree-id3119 . -84) (undo-tree-id3120 . -84) (undo-tree-id3121 . -96) (undo-tree-id3122 . -96) (undo-tree-id3123 . -96) (undo-tree-id3124 . -96) (undo-tree-id3125 . -96) (undo-tree-id3126 . -96) (undo-tree-id3127 . -96) (undo-tree-id3128 . -96) (undo-tree-id3129 . -105) (undo-tree-id3130 . -106) (undo-tree-id3131 . -106) (undo-tree-id3132 . -106) (undo-tree-id3133 . -106) (undo-tree-id3134 . -106) (undo-tree-id3135 . -106) (undo-tree-id3136 . -106) (undo-tree-id3137 . -106) (undo-tree-id3138 . -106) (undo-tree-id3139 . -106) (undo-tree-id3140 . -107) (undo-tree-id3141 . -107) (undo-tree-id3142 . -107) (undo-tree-id3143 . -107) (undo-tree-id3144 . -107) (undo-tree-id3145 . -107) (undo-tree-id3146 . -107) (undo-tree-id3147 . -107) (undo-tree-id3148 . -107) (undo-tree-id3149 . -106) (undo-tree-id3150 . -106) (undo-tree-id3151 . -106) (undo-tree-id3152 . -106) (undo-tree-id3153 . -106) (undo-tree-id3154 . -106) (undo-tree-id3155 . -106) (undo-tree-id3156 . -106) (undo-tree-id3157 . -106) (undo-tree-id3158 . -106) (undo-tree-id3159 . -106) (undo-tree-id3160 . -106) (undo-tree-id3161 . -106) (undo-tree-id3162 . -106) (undo-tree-id3163 . -106) (undo-tree-id3164 . -106) (undo-tree-id3165 . -106) (undo-tree-id3166 . -106) (undo-tree-id3167 . -106) (undo-tree-id3168 . -107) (undo-tree-id3169 . -82) (undo-tree-id3170 . -107) (undo-tree-id3171 . 11) (undo-tree-id3172 . -106) (undo-tree-id3173 . -107) (undo-tree-id3174 . -107) (undo-tree-id3175 . -107) (undo-tree-id3176 . -107) (undo-tree-id3177 . -107) (undo-tree-id3178 . -107) (undo-tree-id3179 . -107) (undo-tree-id3180 . -107) (undo-tree-id3181 . -107) (undo-tree-id3182 . -3) (3119 . 3122) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3223) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . 1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) 3225) nil (25757 59619 470158 248000) 0 nil])
([nil nil ((3225 . 3226) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3225) (undo-tree-id2760 . 1) (undo-tree-id2761 . 1) (undo-tree-id2762 . 1) (undo-tree-id2763 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 3225) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3226) (undo-tree-id2793 . 1) (undo-tree-id2794 . 1) (undo-tree-id2795 . 1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) 3225) nil (25757 59619 469834 700000) 0 nil])
([nil nil ((#("Moreover, " 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3226) (undo-tree-id2747 . -9) (undo-tree-id2748 . 10) (undo-tree-id2749 . -9) (undo-tree-id2750 . -9) (undo-tree-id2751 . 10) (undo-tree-id2752 . -9) (undo-tree-id2753 . -10) (undo-tree-id2754 . -9) (undo-tree-id2755 . -7) (undo-tree-id2756 . -8) (undo-tree-id2757 . -9) (undo-tree-id2758 . -9) (undo-tree-id2759 . -10) 3235) nil (25757 59619 469570 282000) 0 nil])
([nil nil ((3226 . 3227) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3226)) nil (25757 59619 469560 872000) 0 nil])
([nil nil ((#("also" 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3238) (undo-tree-id2744 . -3) (undo-tree-id2745 . -4) (undo-tree-id2746 . -4)) nil (25757 59619 469559 713000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3237) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1)) nil (25757 59619 469556 194000) 0 nil])
([nil nil ((3275 . 3285)) nil (25757 59619 469540 493000) 0 nil])
([nil nil ((#("and" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3297) (undo-tree-id2716 . -2) (undo-tree-id2717 . -3) (undo-tree-id2718 . -3)) nil (25757 59619 469539 279000) 0 nil])
([nil nil ((#("slight scale invariance. This implies that the network's predictions are less
" 0 71 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 71 78 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3298) (undo-tree-id2714 . -77) (undo-tree-id2715 . -78)) nil (25757 59619 469536 487000) 0 nil])
([nil nil ((#("affected by moderate rotations or variations in the size of the input.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 71 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3298) (undo-tree-id2712 . -70) (undo-tree-id2713 . -71)) nil (25757 59619 469533 514000) 0 nil])
([nil nil ((3296 . 3297) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3296) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) 3297) nil (25757 59619 469527 374000) 0 nil])
([nil nil ((3224 . 3300) (#("- 
- Max pooling offers a limited amount of rotational and scale invariance." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 76 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3224) (undo-tree-id3254 . -5) (undo-tree-id3255 . -5) (undo-tree-id3256 . 70) (undo-tree-id3257 . -5) (undo-tree-id3258 . -5) (undo-tree-id3259 . -61) (undo-tree-id3260 . 71) (undo-tree-id3261 . -4) (undo-tree-id3262 . -4) (undo-tree-id3263 . -4) (undo-tree-id3264 . -4) (undo-tree-id3265 . -4) (undo-tree-id3266 . -4) (undo-tree-id3267 . -4) (undo-tree-id3268 . -4) (undo-tree-id3269 . -4) (undo-tree-id3270 . -4) (undo-tree-id3271 . -4) (undo-tree-id3272 . -4) (undo-tree-id3273 . -4) (undo-tree-id3274 . -4) (undo-tree-id3275 . -4) (undo-tree-id3276 . -4) (undo-tree-id3277 . -4) (undo-tree-id3278 . -4) (undo-tree-id3279 . -4) (undo-tree-id3280 . -4) (undo-tree-id3281 . -4) (undo-tree-id3282 . -4) (undo-tree-id3283 . -4) (undo-tree-id3284 . -4) (undo-tree-id3285 . -4) (undo-tree-id3286 . -4) (undo-tree-id3287 . -4) (undo-tree-id3288 . -5) (undo-tree-id3289 . -5) (undo-tree-id3290 . -5) (undo-tree-id3291 . -16) (undo-tree-id3292 . -16) (undo-tree-id3293 . -16) (undo-tree-id3294 . -16) (undo-tree-id3295 . -16) (undo-tree-id3296 . -16) (undo-tree-id3297 . -16) (undo-tree-id3298 . -16) (undo-tree-id3299 . -16) (undo-tree-id3300 . -16) (undo-tree-id3301 . -16) (undo-tree-id3302 . -16) (undo-tree-id3303 . -16) (undo-tree-id3304 . -16) (undo-tree-id3305 . -16) (undo-tree-id3306 . -16) (undo-tree-id3307 . -16) (undo-tree-id3308 . -16) (undo-tree-id3309 . -16) (undo-tree-id3310 . -16) (undo-tree-id3311 . -16) (undo-tree-id3312 . -16) (undo-tree-id3313 . -16) (undo-tree-id3314 . -75) (undo-tree-id3315 . -75) (undo-tree-id3316 . 11) (undo-tree-id3317 . -75) (undo-tree-id3318 . -75) (undo-tree-id3319 . -75) (undo-tree-id3320 . -75) (undo-tree-id3321 . -75) (undo-tree-id3322 . -75) (undo-tree-id3323 . -75) (undo-tree-id3324 . -75) (undo-tree-id3325 . -75) (undo-tree-id3326 . -75) (undo-tree-id3327 . -75) (undo-tree-id3328 . -3) (3224 . 3227) 3298 (t 25757 59619 525543 849000)) nil (25757 59623 329841 824000) 0 nil])
([nil nil ((3299 . 3300) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3299) (undo-tree-id3191 . 1) (undo-tree-id3192 . 1) (undo-tree-id3193 . 1) (undo-tree-id3194 . -1) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 3299) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3300) (undo-tree-id3228 . 1) (undo-tree-id3229 . 1) (undo-tree-id3230 . 1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) 3299) nil (25757 59623 329653 113000) 0 nil])
([nil nil ((3300 . 3304) (#("These types of" 0 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3300) (undo-tree-id3343 . -13) (undo-tree-id3344 . 14) (undo-tree-id3345 . -13) (undo-tree-id3346 . -13) (undo-tree-id3347 . 14) (undo-tree-id3348 . -13) (undo-tree-id3349 . -4) (undo-tree-id3350 . -10) (undo-tree-id3351 . -6) (undo-tree-id3352 . -14) (undo-tree-id3353 . -13) (undo-tree-id3354 . -4) (undo-tree-id3355 . -4) (undo-tree-id3356 . -4) (undo-tree-id3357 . -4) (undo-tree-id3358 . -4) (undo-tree-id3359 . -4) (undo-tree-id3360 . -4) (undo-tree-id3361 . -4) (undo-tree-id3362 . -3) (undo-tree-id3363 . -3) (undo-tree-id3364 . -3) (undo-tree-id3365 . -3) (undo-tree-id3366 . -3) (undo-tree-id3367 . -3) (undo-tree-id3368 . -3) (undo-tree-id3369 . -3) (undo-tree-id3370 . -2) (undo-tree-id3371 . -2) (undo-tree-id3372 . -2) (undo-tree-id3373 . -2) (undo-tree-id3374 . -2) (undo-tree-id3375 . -2) (undo-tree-id3376 . -2) (undo-tree-id3377 . -2) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -6) (undo-tree-id3387 . -6) (undo-tree-id3388 . -6) (undo-tree-id3389 . -6) (undo-tree-id3390 . -6) (undo-tree-id3391 . -6) (undo-tree-id3392 . -6) (undo-tree-id3393 . -6) (undo-tree-id3394 . -10) (undo-tree-id3395 . -10) (undo-tree-id3396 . -10) (undo-tree-id3397 . -10) (undo-tree-id3398 . -10) (undo-tree-id3399 . -10) (undo-tree-id3400 . -10) (undo-tree-id3401 . -10) (undo-tree-id3402 . -13) (undo-tree-id3403 . -13) (undo-tree-id3404 . -13) (undo-tree-id3405 . -13) (undo-tree-id3406 . -13) (undo-tree-id3407 . -13) (undo-tree-id3408 . -13) (undo-tree-id3409 . -13) (undo-tree-id3410 . -13) (undo-tree-id3411 . -14) (undo-tree-id3412 . -14) (undo-tree-id3413 . -14) 3313 (t 25757 59623 341519 974000)) nil (25757 59657 427761 754000) 0 nil])
([nil nil ((#("provided by max pooling " 0 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3317) (undo-tree-id3329 . -23) (undo-tree-id3330 . -23) (undo-tree-id3331 . -23) (undo-tree-id3332 . -23) (undo-tree-id3333 . -24) (undo-tree-id3334 . -23) (undo-tree-id3335 . -7) (undo-tree-id3336 . -10) (undo-tree-id3337 . -14) (undo-tree-id3338 . -22) (undo-tree-id3339 . -24) (undo-tree-id3340 . -23) (undo-tree-id3341 . -23) (undo-tree-id3342 . -24) 3340) nil (25757 59657 427671 33000) 0 nil])
([nil nil ((3339 . 3340) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3339) (undo-tree-id3648 . -1) 3317 (t 25757 59657 437320 959000)) nil (25757 59688 63186 29000) 0 nil])
([nil nil ((#("in scenarios " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3337) (undo-tree-id3450 . -12) (undo-tree-id3451 . -12) (undo-tree-id3452 . -12) (undo-tree-id3453 . -12) (undo-tree-id3454 . -2) (undo-tree-id3455 . -2) (undo-tree-id3456 . -2) (undo-tree-id3457 . -2) (undo-tree-id3458 . -2) (undo-tree-id3459 . -2) (undo-tree-id3460 . -2) (undo-tree-id3461 . -2) (undo-tree-id3462 . -2) (undo-tree-id3463 . -2) (undo-tree-id3464 . -2) (undo-tree-id3465 . -2) (undo-tree-id3466 . -2) (undo-tree-id3467 . -2) (undo-tree-id3468 . -2) (undo-tree-id3469 . -2) (undo-tree-id3470 . -2) (undo-tree-id3471 . -2) (undo-tree-id3472 . -2) (undo-tree-id3473 . -2) (undo-tree-id3474 . -2) (undo-tree-id3475 . -2) (undo-tree-id3476 . -2) (undo-tree-id3477 . -2) (undo-tree-id3478 . -2) (undo-tree-id3479 . -2) (undo-tree-id3480 . -2) (undo-tree-id3481 . -2) (undo-tree-id3482 . -2) (undo-tree-id3483 . -2) (undo-tree-id3484 . -2) (undo-tree-id3485 . -2) (undo-tree-id3486 . -2) (undo-tree-id3487 . -2) (undo-tree-id3488 . -2) (undo-tree-id3489 . -2) (undo-tree-id3490 . -2) (undo-tree-id3491 . -2) (undo-tree-id3492 . -2) (undo-tree-id3493 . -2) (undo-tree-id3494 . -2) (undo-tree-id3495 . -2) (undo-tree-id3496 . -2) (undo-tree-id3497 . -2) (undo-tree-id3498 . -2) (undo-tree-id3499 . -2) (undo-tree-id3500 . -2) (undo-tree-id3501 . -2) (undo-tree-id3502 . -2) (undo-tree-id3503 . -2) (undo-tree-id3504 . -2) (undo-tree-id3505 . -13) (undo-tree-id3506 . -12) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -11) (undo-tree-id3530 . -11) (undo-tree-id3531 . -11) (undo-tree-id3532 . -11) (undo-tree-id3533 . -11) (undo-tree-id3534 . -11) (undo-tree-id3535 . -11) (undo-tree-id3536 . -11) (undo-tree-id3537 . -11) (undo-tree-id3538 . -11) (undo-tree-id3539 . -11) (undo-tree-id3540 . -11) (undo-tree-id3541 . -11) (undo-tree-id3542 . -11) (undo-tree-id3543 . -11) (undo-tree-id3544 . -11) (undo-tree-id3545 . -11) (undo-tree-id3546 . -11) (undo-tree-id3547 . -11) (undo-tree-id3548 . -11) (undo-tree-id3549 . -11) (undo-tree-id3550 . -11) (undo-tree-id3551 . -13) (undo-tree-id3552 . -13) (undo-tree-id3553 . -13) (undo-tree-id3554 . -13) (undo-tree-id3555 . -13) (undo-tree-id3556 . -13) (undo-tree-id3557 . -13) (undo-tree-id3558 . -13) (undo-tree-id3559 . -13) (undo-tree-id3560 . -13) (undo-tree-id3561 . -13) (undo-tree-id3562 . -13) (undo-tree-id3563 . -13) (undo-tree-id3564 . -13) (undo-tree-id3565 . -13) (undo-tree-id3566 . -13) (undo-tree-id3567 . -13) (undo-tree-id3568 . -13) (undo-tree-id3569 . -13) (undo-tree-id3570 . -13) (undo-tree-id3571 . -13) (undo-tree-id3572 . -13) (undo-tree-id3573 . -13) (undo-tree-id3574 . -13) (undo-tree-id3575 . -13) (undo-tree-id3576 . -13) (undo-tree-id3577 . -13) (undo-tree-id3578 . -13) (undo-tree-id3579 . -13) (undo-tree-id3580 . -12) (undo-tree-id3581 . -12) (undo-tree-id3582 . -12) (undo-tree-id3583 . -12) (undo-tree-id3584 . -12) (undo-tree-id3585 . -12) (undo-tree-id3586 . -12) (undo-tree-id3587 . -12) (undo-tree-id3588 . -12) (undo-tree-id3589 . -12) (undo-tree-id3590 . -12) (undo-tree-id3591 . -12) (undo-tree-id3592 . -12) (undo-tree-id3593 . -12) (undo-tree-id3594 . -12) (undo-tree-id3595 . -12) (undo-tree-id3596 . -12) (undo-tree-id3597 . -12) (undo-tree-id3598 . -12) (undo-tree-id3599 . -12) (undo-tree-id3600 . -12) (undo-tree-id3601 . -12) (undo-tree-id3602 . -11) (undo-tree-id3603 . -11) (undo-tree-id3604 . -11) (undo-tree-id3605 . -11) (undo-tree-id3606 . -11) (undo-tree-id3607 . -11) (undo-tree-id3608 . -11) (undo-tree-id3609 . -11) (undo-tree-id3610 . -11) (undo-tree-id3611 . -11) (undo-tree-id3612 . -11) (undo-tree-id3613 . -11) (undo-tree-id3614 . -11) (undo-tree-id3615 . -11) (undo-tree-id3616 . -11) (undo-tree-id3617 . -11) (undo-tree-id3618 . -11) (undo-tree-id3619 . -11) (undo-tree-id3620 . -11) (undo-tree-id3621 . -11) (undo-tree-id3622 . -11) (undo-tree-id3623 . -11) (undo-tree-id3624 . -12) (undo-tree-id3625 . -12) (undo-tree-id3626 . -12) (undo-tree-id3627 . -12) (undo-tree-id3628 . -12) (undo-tree-id3629 . -12) (undo-tree-id3630 . -12) (undo-tree-id3631 . -12) (undo-tree-id3632 . -12) (undo-tree-id3633 . -12) (undo-tree-id3634 . -12) (undo-tree-id3635 . -12) (undo-tree-id3636 . -12) (undo-tree-id3637 . -12) (undo-tree-id3638 . -12) (undo-tree-id3639 . -12) (undo-tree-id3640 . -12) (undo-tree-id3641 . -12) (undo-tree-id3642 . -12) (undo-tree-id3643 . -12) (undo-tree-id3644 . -12) (undo-tree-id3645 . -12) (undo-tree-id3646 . -12) (undo-tree-id3647 . -13) 3349) nil (25757 59688 63175 394000) 0 nil])
([nil nil ((3374 . 3375)) nil (25757 59688 62926 291000) 0 nil])
([nil nil ((3375 . 3377)) nil (25757 59688 62925 324000) 0 nil])
([nil nil ((3409 . 3410) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3409) (undo-tree-id3449 . -1) 3376) nil (25757 59688 63436 417000) 0 nil])
([nil nil ((#(", such as in classification tasks. They allow the network to focus more on the overall" 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 86 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3403) (undo-tree-id3653 . -85) (undo-tree-id3654 . -6) (undo-tree-id3655 . 79) (undo-tree-id3656 . -6) (undo-tree-id3657 . -6) (undo-tree-id3658 . -6) (undo-tree-id3659 . -6) (undo-tree-id3660 . -6) (undo-tree-id3661 . -6) (undo-tree-id3662 . -6) (undo-tree-id3663 . -6) (undo-tree-id3664 . -6) (undo-tree-id3665 . -6) (undo-tree-id3666 . -6) (undo-tree-id3667 . -6) (undo-tree-id3668 . -6) (undo-tree-id3669 . -6) (undo-tree-id3670 . -6) (undo-tree-id3671 . -2) (undo-tree-id3672 . -2) (undo-tree-id3673 . -2) (undo-tree-id3674 . -2) (undo-tree-id3675 . -2) (undo-tree-id3676 . -2) (undo-tree-id3677 . -2) (undo-tree-id3678 . -2) (undo-tree-id3679 . -2) (undo-tree-id3680 . -2) (undo-tree-id3681 . -2) (undo-tree-id3682 . -2) (undo-tree-id3683 . -2) (undo-tree-id3684 . -2) (undo-tree-id3685 . -2) (undo-tree-id3686 . -86) (undo-tree-id3687 . -86)) nil (25757 59692 927016 721000) 0 nil] [nil nil ((#(", such as in classification tasks. They allow the network to focus more on the overall" 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 86 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 3403) (undo-tree-id3414 . -85) (undo-tree-id3415 . -6) (undo-tree-id3416 . 79) (undo-tree-id3417 . -6) (undo-tree-id3418 . -6) (undo-tree-id3419 . -6) (undo-tree-id3420 . -6) (undo-tree-id3421 . -6) (undo-tree-id3422 . -6) (undo-tree-id3423 . -6) (undo-tree-id3424 . -6) (undo-tree-id3425 . -6) (undo-tree-id3426 . -6) (undo-tree-id3427 . -6) (undo-tree-id3428 . -6) (undo-tree-id3429 . -6) (undo-tree-id3430 . -6) (undo-tree-id3431 . -6) (undo-tree-id3432 . -2) (undo-tree-id3433 . -2) (undo-tree-id3434 . -2) (undo-tree-id3435 . -2) (undo-tree-id3436 . -2) (undo-tree-id3437 . -2) (undo-tree-id3438 . -2) (undo-tree-id3439 . -2) (undo-tree-id3440 . -2) (undo-tree-id3441 . -2) (undo-tree-id3442 . -2) (undo-tree-id3443 . -2) (undo-tree-id3444 . -2) (undo-tree-id3445 . -2) (undo-tree-id3446 . -2) (undo-tree-id3447 . -86) (undo-tree-id3448 . -86)) ((3403 . 3489)) (25757 59688 62917 420000) 0 nil])
([nil nil ((#("features and patterns rather than being overly influenced by specific positional
" 0 81 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3404) (undo-tree-id3651 . -80) (undo-tree-id3652 . -81)) nil (25757 59692 926989 628000) 0 nil])
nil
([nil nil ((#("or scaling factors.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 20 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3404) (undo-tree-id3649 . -19) (undo-tree-id3650 . -20)) nil (25757 59692 926984 41000) 0 nil])
([nil nil ((#("max_pool = keras.layers.MaxPool2D(pool_size=2)
" 0 3 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3 4 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 8 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8 33 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 33 34 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 34 38 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 38 39 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 39 43 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 43 45 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 45 46 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 46 47 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3647) (undo-tree-id3752 . -46) (undo-tree-id3753 . -47) (t 25757 59692 929139 863000)) nil (25757 59711 707087 452000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3966 . 3967) (#("
" 0 1 (font-lock-fontified t font-lock-multiline t face (org-block) src-block t fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -4013) (3966 . 4014) 3947) nil (25757 59711 707084 796000) 0 nil])
([nil nil ((#("#+begin_src  python
" 0 19 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line) 19 20 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-multiline t face org-block-begin-line)) . 3627) (undo-tree-id3708 . -19) (undo-tree-id3709 . -20) (undo-tree-id3710 . -20) (undo-tree-id3711 . -20) (undo-tree-id3712 . -20) (undo-tree-id3713 . -20) (undo-tree-id3714 . -20) (undo-tree-id3715 . -20) (undo-tree-id3716 . -20) (undo-tree-id3717 . -20) (undo-tree-id3718 . -20) (undo-tree-id3719 . -20) (undo-tree-id3720 . -20) (undo-tree-id3721 . -20) (undo-tree-id3722 . -20) (undo-tree-id3723 . -20) (undo-tree-id3724 . -20) (undo-tree-id3725 . -20) (undo-tree-id3726 . -20) (undo-tree-id3727 . -20) (undo-tree-id3728 . -20) (undo-tree-id3729 . -20) (undo-tree-id3730 . -20) (undo-tree-id3731 . -20) (undo-tree-id3732 . -20) (undo-tree-id3733 . -20) (undo-tree-id3734 . -20) (undo-tree-id3735 . -20) (undo-tree-id3736 . -20) (undo-tree-id3737 . -20) (undo-tree-id3738 . -20) (undo-tree-id3739 . -20) (undo-tree-id3740 . -20) (undo-tree-id3741 . -20) (undo-tree-id3742 . -20) (undo-tree-id3743 . -20) (undo-tree-id3744 . -20) (undo-tree-id3745 . -20) (undo-tree-id3746 . -20) (undo-tree-id3747 . -20) (undo-tree-id3748 . -20) (undo-tree-id3749 . -20) (undo-tree-id3750 . -20) (undo-tree-id3751 . -20)) nil (25757 59711 707081 228000) 0 nil])
([nil nil ((#("#+end_src  
" 0 11 (fontified t font-lock-fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-meta-line) 11 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3627) (undo-tree-id3688 . -11) (undo-tree-id3689 . -11) (undo-tree-id3690 . -12) (undo-tree-id3691 . -12) (undo-tree-id3692 . -12) (undo-tree-id3693 . -12) (undo-tree-id3694 . -12) (undo-tree-id3695 . -12) (undo-tree-id3696 . -12) (undo-tree-id3697 . -12) (undo-tree-id3698 . -12) (undo-tree-id3699 . -12) (undo-tree-id3700 . -12) (undo-tree-id3701 . -12) (undo-tree-id3702 . -12) (undo-tree-id3703 . -12) (undo-tree-id3704 . -12) (undo-tree-id3705 . -12) (undo-tree-id3706 . -11) (undo-tree-id3707 . -12)) nil (25757 59711 707047 599000) 0 nil])
([nil nil ((26420 . 26421) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26420) (t 25757 59711 717054 160000)) nil (25757 59799 71416 109000) 0 nil])
([nil nil ((26480 . 26481) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26480) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -26481) (undo-tree-id3759 . -1) 26459 (t 25757 59799 80739 934000)) nil (25757 59805 750404 720000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . -26500) (nil wrap-prefix #("  " 0 2 (face org-indent)) 26499 . 26500) (26499 . 26500) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26515) (undo-tree-id3756 . -1) 26480) nil (25757 59805 750399 904000) 0 nil])
([nil nil ((26515 . 26516) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -26515) (undo-tree-id3754 . 1) (undo-tree-id3755 . -1) 26500) nil (25757 59847 163078 695000) 0 nil])
([nil nil ((25631 . 25632) (t 25757 59805 760721 211000) 25558) nil (25757 59887 85490 241000) 0 nil] [nil nil ((25558 . 25559) (t 25757 59805 760721 211000)) ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25558) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1)) (25757 59846 235353 329000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25632) (undo-tree-id3944 . 1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1)) nil (25757 59887 85487 677000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25558) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) 25559) ((25558 . 25559)) (25757 59846 234506 290000) 0 nil])
([nil nil ((25632 . 25634)) nil (25757 59887 85455 386000) 0 nil])
nil
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25674) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1)) nil (25757 59887 85454 384000) 0 nil])
([nil nil ((25632 . 25677) (#("- 
- Predict a bounding box around the object" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 45 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25632) (undo-tree-id3879 . -45) (undo-tree-id3880 . -45) (undo-tree-id3881 . 40) (undo-tree-id3882 . -45) (undo-tree-id3883 . -4) (undo-tree-id3884 . -4) (undo-tree-id3885 . -4) (undo-tree-id3886 . -4) (undo-tree-id3887 . -4) (undo-tree-id3888 . -4) (undo-tree-id3889 . -4) (undo-tree-id3890 . -4) (undo-tree-id3891 . -5) (undo-tree-id3892 . -5) (undo-tree-id3893 . -5) (undo-tree-id3894 . -5) (undo-tree-id3895 . -5) (undo-tree-id3896 . -5) (undo-tree-id3897 . -5) (undo-tree-id3898 . -5) (undo-tree-id3899 . -5) (undo-tree-id3900 . -4) (undo-tree-id3901 . -4) (undo-tree-id3902 . -4) (undo-tree-id3903 . -4) (undo-tree-id3904 . -4) (undo-tree-id3905 . -4) (undo-tree-id3906 . -4) (undo-tree-id3907 . -4) (undo-tree-id3908 . -4) (undo-tree-id3909 . -4) (undo-tree-id3910 . -4) (undo-tree-id3911 . -4) (undo-tree-id3912 . -4) (undo-tree-id3913 . -4) (undo-tree-id3914 . -4) (undo-tree-id3915 . -4) (undo-tree-id3916 . -4) (undo-tree-id3917 . -4) (undo-tree-id3918 . -4) (undo-tree-id3919 . -5) (undo-tree-id3920 . -45) (undo-tree-id3921 . -45) (undo-tree-id3922 . -45) (undo-tree-id3923 . -45) (undo-tree-id3924 . -45) (undo-tree-id3925 . -45) (undo-tree-id3926 . -45) (undo-tree-id3927 . -45) (undo-tree-id3928 . -45) (undo-tree-id3929 . -45) (undo-tree-id3930 . -45) (undo-tree-id3931 . -45) (undo-tree-id3932 . -45) (undo-tree-id3933 . -45) (undo-tree-id3934 . -45) (undo-tree-id3935 . -45) (undo-tree-id3936 . -45) (undo-tree-id3937 . -45) (undo-tree-id3938 . -45) (undo-tree-id3939 . -45) (undo-tree-id3940 . -45) (undo-tree-id3941 . -3) (25632 . 25635) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25674)) nil (25757 59887 85449 829000) 0 nil])
([nil nil ((25676 . 25677) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 25676) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25677) (undo-tree-id3877 . 1) (undo-tree-id3878 . -1) 25676) nil (25757 59887 85404 188000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25747) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1)) nil (25757 59887 85393 400000) 0 nil])
([nil nil ((25738 . 25739) (#("â€™" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25738) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1)) nil (25757 59887 86273 687000) 0 nil])
([nil nil ((25749 . 25751) (#("A" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25749) (undo-tree-id5556 . 1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) 25750) nil (25757 59952 617110 259000) 0 nil] [nil nil ((25749 . 25750) (25749 . 25751)) ((#("* " 0 1 (fontified nil line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) composition (0 1 [9673]) keymap (keymap) face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) keymap (keymap) face org-level-1)) . 25749) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25749)) (25757 59887 85373 804000) 0 nil])
([nil nil ((#(" s well as" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25750) (undo-tree-id5535 . -9) (undo-tree-id5536 . 9) (undo-tree-id5537 . -9) (undo-tree-id5538 . -9) (undo-tree-id5539 . -9) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -10) (undo-tree-id5550 . -9) (undo-tree-id5551 . -1) (undo-tree-id5552 . -6) (undo-tree-id5553 . -9) (undo-tree-id5554 . -9) (undo-tree-id5555 . -10) 25759) nil (25757 59952 617098 617000) 0 nil])
nil
([nil nil ((25634 . 25641) (25633 . 25634) (#("p" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25633) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) (undo-tree-id5364 . -1) (undo-tree-id5365 . -1) (undo-tree-id5366 . -1) (undo-tree-id5367 . -1) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) (undo-tree-id5392 . -1) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) (undo-tree-id5396 . -1) (undo-tree-id5397 . -1) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) (undo-tree-id5400 . -1) (undo-tree-id5401 . -1) (undo-tree-id5402 . -1) (undo-tree-id5403 . -1) (undo-tree-id5404 . -1) (undo-tree-id5405 . -1) (undo-tree-id5406 . -1) (undo-tree-id5407 . -1) (undo-tree-id5408 . -1) (undo-tree-id5409 . -1) (undo-tree-id5410 . -1) (undo-tree-id5411 . -1) (undo-tree-id5412 . -1) (undo-tree-id5413 . -1) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) (undo-tree-id5419 . -1) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) (undo-tree-id5424 . -1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25634) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25635) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) 25636 (25629 . 25636) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25629) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1)) nil (25757 59952 617076 13000) 0 nil])
([nil nil ((25645 . 25646) (#("Predict a" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 1 9 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 25645) (undo-tree-id5323 . -8) (undo-tree-id5324 . -8) (undo-tree-id5325 . -8) (undo-tree-id5326 . -8) (undo-tree-id5327 . -9) (undo-tree-id5328 . -8) (undo-tree-id5329 . -6) (undo-tree-id5330 . -6) (undo-tree-id5331 . -6) (undo-tree-id5332 . -6) (undo-tree-id5333 . -6) (undo-tree-id5334 . -6) (undo-tree-id5335 . -6) (undo-tree-id5336 . -6) (undo-tree-id5337 . -8) (undo-tree-id5338 . -8) (undo-tree-id5339 . -8) (undo-tree-id5340 . -8) (undo-tree-id5341 . -8) (undo-tree-id5342 . -8) (undo-tree-id5343 . -8) (undo-tree-id5344 . -8) (undo-tree-id5345 . -8) (undo-tree-id5346 . -9) (undo-tree-id5347 . -9) (undo-tree-id5348 . -9) 25653) nil (25757 59952 616934 599000) 0 nil])
([nil nil ((#("Predict " 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25680) (undo-tree-id5299 . -7) (undo-tree-id5300 . -7) (undo-tree-id5301 . -7) (undo-tree-id5302 . -7) (undo-tree-id5303 . -8) (undo-tree-id5304 . -7) (undo-tree-id5305 . -6) (undo-tree-id5306 . -6) (undo-tree-id5307 . -6) (undo-tree-id5308 . -6) (undo-tree-id5309 . -6) (undo-tree-id5310 . -6) (undo-tree-id5311 . -6) (undo-tree-id5312 . -6) (undo-tree-id5313 . -7) (undo-tree-id5314 . -7) (undo-tree-id5315 . -7) (undo-tree-id5316 . -7) (undo-tree-id5317 . -7) (undo-tree-id5318 . -7) (undo-tree-id5319 . -7) (undo-tree-id5320 . -7) (undo-tree-id5321 . -7) (undo-tree-id5322 . -8) 25687) nil (25757 59952 616915 74000) 0 nil])
([nil nil ((#("its " 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25746) (undo-tree-id5275 . -3) (undo-tree-id5276 . -3) (undo-tree-id5277 . -3) (undo-tree-id5278 . -3) (undo-tree-id5279 . -4) (undo-tree-id5280 . -3) (undo-tree-id5281 . -2) (undo-tree-id5282 . -2) (undo-tree-id5283 . -2) (undo-tree-id5284 . -2) (undo-tree-id5285 . -2) (undo-tree-id5286 . -2) (undo-tree-id5287 . -2) (undo-tree-id5288 . -2) (undo-tree-id5289 . -3) (undo-tree-id5290 . -3) (undo-tree-id5291 . -3) (undo-tree-id5292 . -3) (undo-tree-id5293 . -3) (undo-tree-id5294 . -3) (undo-tree-id5295 . -3) (undo-tree-id5296 . -3) (undo-tree-id5297 . -3) (undo-tree-id5298 . -4) 25749) nil (25757 59952 616896 143000) 0 nil])
([nil nil ((25765 . 25773) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25765) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25766) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25767) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25768) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) 25769 (25764 . 25769) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25764) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1) (undo-tree-id5152 . -1) (undo-tree-id5153 . -1) (undo-tree-id5154 . -1) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25765) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25766) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) 25767 (25762 . 25767) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25762) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) 25763) nil (25757 59952 616867 55000) 0 nil])
([nil nil ((25744 . 25776) (#("- 
- height and width of the box" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 4 32 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25744) (undo-tree-id4318 . -5) (undo-tree-id4319 . -5) (undo-tree-id4320 . -5) (undo-tree-id4321 . -5) (undo-tree-id4322 . 27) (undo-tree-id4323 . -5) (undo-tree-id4324 . -5) (undo-tree-id4325 . -31) (undo-tree-id4326 . -32) (undo-tree-id4327 . -32) (undo-tree-id4328 . -4) (undo-tree-id4329 . -4) (undo-tree-id4330 . -4) (undo-tree-id4331 . -4) (undo-tree-id4332 . -4) (undo-tree-id4333 . -4) (undo-tree-id4334 . -4) (undo-tree-id4335 . -4) (undo-tree-id4336 . -4) (undo-tree-id4337 . -4) (undo-tree-id4338 . -4) (undo-tree-id4339 . -4) (undo-tree-id4340 . -4) (undo-tree-id4341 . -4) (undo-tree-id4342 . -4) (undo-tree-id4343 . -4) (undo-tree-id4344 . -4) (undo-tree-id4345 . -4) (undo-tree-id4346 . -4) (undo-tree-id4347 . -4) (undo-tree-id4348 . -4) (undo-tree-id4349 . -4) (undo-tree-id4350 . -4) (undo-tree-id4351 . -4) (undo-tree-id4352 . -4) (undo-tree-id4353 . -4) (undo-tree-id4354 . -4) (undo-tree-id4355 . -4) (undo-tree-id4356 . -4) (undo-tree-id4357 . -4) (undo-tree-id4358 . -4) (undo-tree-id4359 . -4) (undo-tree-id4360 . -4) (undo-tree-id4361 . -4) (undo-tree-id4362 . -4) (undo-tree-id4363 . -4) (undo-tree-id4364 . -4) (undo-tree-id4365 . -4) (undo-tree-id4366 . -4) (undo-tree-id4367 . -4) (undo-tree-id4368 . -4) (undo-tree-id4369 . -4) (undo-tree-id4370 . -4) (undo-tree-id4371 . -4) (undo-tree-id4372 . -4) (undo-tree-id4373 . -4) (undo-tree-id4374 . -4) (undo-tree-id4375 . -4) (undo-tree-id4376 . -4) (undo-tree-id4377 . -4) (undo-tree-id4378 . -4) (undo-tree-id4379 . -4) (undo-tree-id4380 . -4) (undo-tree-id4381 . -4) (undo-tree-id4382 . -4) (undo-tree-id4383 . -4) (undo-tree-id4384 . -4) (undo-tree-id4385 . -4) (undo-tree-id4386 . -4) (undo-tree-id4387 . -4) (undo-tree-id4388 . -4) (undo-tree-id4389 . -4) (undo-tree-id4390 . -4) (undo-tree-id4391 . -4) (undo-tree-id4392 . -4) (undo-tree-id4393 . -4) (undo-tree-id4394 . -5) (undo-tree-id4395 . -5) (undo-tree-id4396 . -5) (undo-tree-id4397 . -5) (undo-tree-id4398 . -5) (undo-tree-id4399 . -5) (undo-tree-id4400 . -5) (undo-tree-id4401 . -5) (undo-tree-id4402 . -5) (undo-tree-id4403 . -5) (undo-tree-id4404 . -5) (undo-tree-id4405 . -5) (undo-tree-id4406 . -5) (undo-tree-id4407 . -5) (undo-tree-id4408 . -5) (undo-tree-id4409 . -5) (undo-tree-id4410 . -5) (undo-tree-id4411 . -5) (undo-tree-id4412 . -5) (undo-tree-id4413 . -5) (undo-tree-id4414 . -5) (undo-tree-id4415 . -5) (undo-tree-id4416 . -5) (undo-tree-id4417 . -5) (undo-tree-id4418 . -5) (undo-tree-id4419 . -5) (undo-tree-id4420 . -5) (undo-tree-id4421 . -5) (undo-tree-id4422 . -5) (undo-tree-id4423 . -5) (undo-tree-id4424 . -5) (undo-tree-id4425 . -5) (undo-tree-id4426 . -5) (undo-tree-id4427 . -5) (undo-tree-id4428 . -5) (undo-tree-id4429 . -5) (undo-tree-id4430 . -5) (undo-tree-id4431 . -5) (undo-tree-id4432 . -5) (undo-tree-id4433 . -5) (undo-tree-id4434 . -5) (undo-tree-id4435 . -5) (undo-tree-id4436 . -5) (undo-tree-id4437 . -5) (undo-tree-id4438 . -10) (undo-tree-id4439 . -14) (undo-tree-id4440 . -20) (undo-tree-id4441 . -21) (undo-tree-id4442 . -21) (undo-tree-id4443 . -21) (undo-tree-id4444 . -21) (undo-tree-id4445 . -21) (undo-tree-id4446 . -21) (undo-tree-id4447 . -21) (undo-tree-id4448 . -21) (undo-tree-id4449 . -21) (undo-tree-id4450 . -21) (undo-tree-id4451 . -21) (undo-tree-id4452 . -21) (undo-tree-id4453 . -21) (undo-tree-id4454 . -21) (undo-tree-id4455 . -21) (undo-tree-id4456 . -21) (undo-tree-id4457 . -21) (undo-tree-id4458 . -21) (undo-tree-id4459 . -21) (undo-tree-id4460 . -21) (undo-tree-id4461 . -22) (undo-tree-id4462 . -22) (undo-tree-id4463 . -22) (undo-tree-id4464 . -22) (undo-tree-id4465 . -22) (undo-tree-id4466 . -22) (undo-tree-id4467 . -22) (undo-tree-id4468 . -22) (undo-tree-id4469 . -22) (undo-tree-id4470 . -23) (undo-tree-id4471 . -23) (undo-tree-id4472 . -23) (undo-tree-id4473 . -23) (undo-tree-id4474 . -23) (undo-tree-id4475 . -23) (undo-tree-id4476 . -23) (undo-tree-id4477 . -23) (undo-tree-id4478 . -23) (undo-tree-id4479 . -23) (undo-tree-id4480 . -23) (undo-tree-id4481 . -23) (undo-tree-id4482 . -23) (undo-tree-id4483 . -23) (undo-tree-id4484 . -23) (undo-tree-id4485 . -23) (undo-tree-id4486 . -23) (undo-tree-id4487 . -23) (undo-tree-id4488 . -23) (undo-tree-id4489 . -23) (undo-tree-id4490 . -23) (undo-tree-id4491 . -23) (undo-tree-id4492 . -23) (undo-tree-id4493 . -23) (undo-tree-id4494 . -23) (undo-tree-id4495 . -23) (undo-tree-id4496 . -23) (undo-tree-id4497 . -23) (undo-tree-id4498 . -23) (undo-tree-id4499 . -23) (undo-tree-id4500 . -23) (undo-tree-id4501 . -23) (undo-tree-id4502 . -23) (undo-tree-id4503 . -23) (undo-tree-id4504 . -23) (undo-tree-id4505 . -23) (undo-tree-id4506 . -23) (undo-tree-id4507 . -23) (undo-tree-id4508 . -23) (undo-tree-id4509 . -23) (undo-tree-id4510 . -23) (undo-tree-id4511 . -23) (undo-tree-id4512 . -23) (undo-tree-id4513 . -23) (undo-tree-id4514 . -23) (undo-tree-id4515 . -23) (undo-tree-id4516 . -23) (undo-tree-id4517 . -23) (undo-tree-id4518 . -23) (undo-tree-id4519 . -23) (undo-tree-id4520 . -23) (undo-tree-id4521 . -23) (undo-tree-id4522 . -23) (undo-tree-id4523 . -23) (undo-tree-id4524 . -23) (undo-tree-id4525 . -23) (undo-tree-id4526 . -23) (undo-tree-id4527 . -23) (undo-tree-id4528 . -23) (undo-tree-id4529 . -23) (undo-tree-id4530 . -23) (undo-tree-id4531 . -23) (undo-tree-id4532 . -23) (undo-tree-id4533 . -23) (undo-tree-id4534 . -23) (undo-tree-id4535 . -23) (undo-tree-id4536 . -23) (undo-tree-id4537 . -23) (undo-tree-id4538 . -23) (undo-tree-id4539 . -23) (undo-tree-id4540 . -23) (undo-tree-id4541 . -23) (undo-tree-id4542 . -23) (undo-tree-id4543 . -23) (undo-tree-id4544 . -23) (undo-tree-id4545 . -23) (undo-tree-id4546 . -23) (undo-tree-id4547 . -23) (undo-tree-id4548 . -23) (undo-tree-id4549 . -23) (undo-tree-id4550 . -23) (undo-tree-id4551 . -23) (undo-tree-id4552 . -23) (undo-tree-id4553 . -23) (undo-tree-id4554 . -23) (undo-tree-id4555 . -23) (undo-tree-id4556 . -23) (undo-tree-id4557 . -23) (undo-tree-id4558 . -23) (undo-tree-id4559 . -23) (undo-tree-id4560 . -23) (undo-tree-id4561 . -23) (undo-tree-id4562 . -23) (undo-tree-id4563 . -23) (undo-tree-id4564 . -23) (undo-tree-id4565 . -23) (undo-tree-id4566 . -23) (undo-tree-id4567 . -23) (undo-tree-id4568 . -23) (undo-tree-id4569 . -23) (undo-tree-id4570 . -23) (undo-tree-id4571 . -23) (undo-tree-id4572 . -23) (undo-tree-id4573 . -23) (undo-tree-id4574 . -23) (undo-tree-id4575 . -23) (undo-tree-id4576 . -23) (undo-tree-id4577 . -23) (undo-tree-id4578 . -23) (undo-tree-id4579 . -23) (undo-tree-id4580 . -23) (undo-tree-id4581 . -23) (undo-tree-id4582 . -23) (undo-tree-id4583 . -23) (undo-tree-id4584 . -23) (undo-tree-id4585 . -23) (undo-tree-id4586 . -23) (undo-tree-id4587 . -23) (undo-tree-id4588 . -23) (undo-tree-id4589 . -23) (undo-tree-id4590 . -23) (undo-tree-id4591 . -23) (undo-tree-id4592 . -23) (undo-tree-id4593 . -23) (undo-tree-id4594 . -23) (undo-tree-id4595 . -23) (undo-tree-id4596 . -23) (undo-tree-id4597 . -23) (undo-tree-id4598 . -23) (undo-tree-id4599 . -24) (undo-tree-id4600 . -24) (undo-tree-id4601 . -24) (undo-tree-id4602 . -24) (undo-tree-id4603 . -24) (undo-tree-id4604 . -24) (undo-tree-id4605 . -24) (undo-tree-id4606 . -24) (undo-tree-id4607 . -24) (undo-tree-id4608 . -24) (undo-tree-id4609 . -24) (undo-tree-id4610 . -24) (undo-tree-id4611 . -24) (undo-tree-id4612 . -24) (undo-tree-id4613 . -24) (undo-tree-id4614 . -24) (undo-tree-id4615 . -24) (undo-tree-id4616 . -24) (undo-tree-id4617 . -24) (undo-tree-id4618 . -24) (undo-tree-id4619 . -24) (undo-tree-id4620 . -24) (undo-tree-id4621 . -24) (undo-tree-id4622 . -24) (undo-tree-id4623 . -24) (undo-tree-id4624 . -24) (undo-tree-id4625 . -24) (undo-tree-id4626 . -24) (undo-tree-id4627 . -24) (undo-tree-id4628 . -24) (undo-tree-id4629 . -24) (undo-tree-id4630 . -24) (undo-tree-id4631 . -24) (undo-tree-id4632 . -24) (undo-tree-id4633 . -24) (undo-tree-id4634 . -24) (undo-tree-id4635 . -24) (undo-tree-id4636 . -24) (undo-tree-id4637 . -24) (undo-tree-id4638 . -24) (undo-tree-id4639 . -24) (undo-tree-id4640 . -24) (undo-tree-id4641 . -24) (undo-tree-id4642 . -24) (undo-tree-id4643 . -24) (undo-tree-id4644 . -24) (undo-tree-id4645 . -24) (undo-tree-id4646 . -24) (undo-tree-id4647 . -24) (undo-tree-id4648 . -24) (undo-tree-id4649 . -24) (undo-tree-id4650 . -24) (undo-tree-id4651 . -24) (undo-tree-id4652 . -24) (undo-tree-id4653 . -24) (undo-tree-id4654 . -24) (undo-tree-id4655 . -24) (undo-tree-id4656 . -24) (undo-tree-id4657 . -24) (undo-tree-id4658 . -24) (undo-tree-id4659 . -24) (undo-tree-id4660 . -24) (undo-tree-id4661 . -24) (undo-tree-id4662 . -24) (undo-tree-id4663 . -24) (undo-tree-id4664 . -24) (undo-tree-id4665 . -24) (undo-tree-id4666 . -24) (undo-tree-id4667 . -24) (undo-tree-id4668 . -24) (undo-tree-id4669 . -24) (undo-tree-id4670 . -24) (undo-tree-id4671 . -24) (undo-tree-id4672 . -24) (undo-tree-id4673 . -24) (undo-tree-id4674 . -24) (undo-tree-id4675 . -24) (undo-tree-id4676 . -24) (undo-tree-id4677 . -24) (undo-tree-id4678 . -24) (undo-tree-id4679 . -24) (undo-tree-id4680 . -24) (undo-tree-id4681 . -24) (undo-tree-id4682 . -24) (undo-tree-id4683 . -24) (undo-tree-id4684 . -24) (undo-tree-id4685 . -24) (undo-tree-id4686 . -24) (undo-tree-id4687 . -24) (undo-tree-id4688 . -24) (undo-tree-id4689 . -24) (undo-tree-id4690 . -24) (undo-tree-id4691 . -24) (undo-tree-id4692 . -24) (undo-tree-id4693 . -24) (undo-tree-id4694 . -24) (undo-tree-id4695 . -24) (undo-tree-id4696 . -24) (undo-tree-id4697 . -24) (undo-tree-id4698 . -24) (undo-tree-id4699 . -24) (undo-tree-id4700 . -24) (undo-tree-id4701 . -24) (undo-tree-id4702 . -24) (undo-tree-id4703 . -24) (undo-tree-id4704 . -24) (undo-tree-id4705 . -24) (undo-tree-id4706 . -24) (undo-tree-id4707 . -24) (undo-tree-id4708 . -24) (undo-tree-id4709 . -24) (undo-tree-id4710 . -24) (undo-tree-id4711 . -24) (undo-tree-id4712 . -24) (undo-tree-id4713 . -24) (undo-tree-id4714 . -24) (undo-tree-id4715 . -25) (undo-tree-id4716 . -25) (undo-tree-id4717 . -25) (undo-tree-id4718 . -25) (undo-tree-id4719 . -25) (undo-tree-id4720 . -25) (undo-tree-id4721 . -25) (undo-tree-id4722 . -25) (undo-tree-id4723 . -25) (undo-tree-id4724 . -26) (undo-tree-id4725 . -26) (undo-tree-id4726 . -26) (undo-tree-id4727 . -26) (undo-tree-id4728 . -26) (undo-tree-id4729 . -26) (undo-tree-id4730 . -26) (undo-tree-id4731 . -26) (undo-tree-id4732 . -26) (undo-tree-id4733 . -26) (undo-tree-id4734 . -26) (undo-tree-id4735 . -26) (undo-tree-id4736 . -26) (undo-tree-id4737 . -26) (undo-tree-id4738 . -26) (undo-tree-id4739 . -26) (undo-tree-id4740 . -26) (undo-tree-id4741 . -26) (undo-tree-id4742 . -26) (undo-tree-id4743 . -26) (undo-tree-id4744 . -26) (undo-tree-id4745 . -26) (undo-tree-id4746 . -26) (undo-tree-id4747 . -26) (undo-tree-id4748 . -26) (undo-tree-id4749 . -26) (undo-tree-id4750 . -26) (undo-tree-id4751 . -26) (undo-tree-id4752 . -26) (undo-tree-id4753 . -26) (undo-tree-id4754 . -26) (undo-tree-id4755 . -26) (undo-tree-id4756 . -26) (undo-tree-id4757 . -26) (undo-tree-id4758 . -26) (undo-tree-id4759 . -26) (undo-tree-id4760 . -26) (undo-tree-id4761 . -26) (undo-tree-id4762 . -27) (undo-tree-id4763 . -27) (undo-tree-id4764 . -27) (undo-tree-id4765 . -27) (undo-tree-id4766 . -27) (undo-tree-id4767 . -27) (undo-tree-id4768 . -27) (undo-tree-id4769 . -27) (undo-tree-id4770 . -27) (undo-tree-id4771 . -27) (undo-tree-id4772 . -27) (undo-tree-id4773 . -27) (undo-tree-id4774 . -27) (undo-tree-id4775 . -27) (undo-tree-id4776 . -27) (undo-tree-id4777 . -27) (undo-tree-id4778 . -27) (undo-tree-id4779 . -28) (undo-tree-id4780 . -28) (undo-tree-id4781 . -28) (undo-tree-id4782 . -28) (undo-tree-id4783 . -28) (undo-tree-id4784 . -28) (undo-tree-id4785 . -28) (undo-tree-id4786 . -28) (undo-tree-id4787 . -28) (undo-tree-id4788 . -28) (undo-tree-id4789 . -28) (undo-tree-id4790 . -28) (undo-tree-id4791 . -28) (undo-tree-id4792 . -28) (undo-tree-id4793 . -28) (undo-tree-id4794 . -28) (undo-tree-id4795 . -28) (undo-tree-id4796 . -29) (undo-tree-id4797 . -29) (undo-tree-id4798 . -29) (undo-tree-id4799 . -29) (undo-tree-id4800 . -29) (undo-tree-id4801 . -29) (undo-tree-id4802 . -29) (undo-tree-id4803 . -29) (undo-tree-id4804 . -29) (undo-tree-id4805 . -29) (undo-tree-id4806 . -30) (undo-tree-id4807 . -30) (undo-tree-id4808 . -30) (undo-tree-id4809 . -30) (undo-tree-id4810 . -30) (undo-tree-id4811 . -30) (undo-tree-id4812 . -30) (undo-tree-id4813 . -30) (undo-tree-id4814 . -30) (undo-tree-id4815 . -30) (undo-tree-id4816 . -30) (undo-tree-id4817 . -30) (undo-tree-id4818 . -30) (undo-tree-id4819 . -30) (undo-tree-id4820 . -30) (undo-tree-id4821 . -30) (undo-tree-id4822 . -30) (undo-tree-id4823 . -30) (undo-tree-id4824 . -30) (undo-tree-id4825 . -30) (undo-tree-id4826 . -30) (undo-tree-id4827 . -30) (undo-tree-id4828 . -30) (undo-tree-id4829 . -30) (undo-tree-id4830 . -30) (undo-tree-id4831 . -30) (undo-tree-id4832 . -30) (undo-tree-id4833 . -30) (undo-tree-id4834 . -30) (undo-tree-id4835 . -30) (undo-tree-id4836 . -30) (undo-tree-id4837 . -30) (undo-tree-id4838 . -30) (undo-tree-id4839 . -30) (undo-tree-id4840 . -30) (undo-tree-id4841 . -30) (undo-tree-id4842 . -30) (undo-tree-id4843 . -30) (undo-tree-id4844 . -31) (undo-tree-id4845 . -31) (undo-tree-id4846 . -31) (undo-tree-id4847 . -31) (undo-tree-id4848 . -31) (undo-tree-id4849 . -31) (undo-tree-id4850 . -31) (undo-tree-id4851 . -31) (undo-tree-id4852 . -31) (undo-tree-id4853 . -31) (undo-tree-id4854 . -31) (undo-tree-id4855 . -31) (undo-tree-id4856 . -31) (undo-tree-id4857 . -31) (undo-tree-id4858 . -31) (undo-tree-id4859 . -31) (undo-tree-id4860 . -31) (undo-tree-id4861 . -32) (undo-tree-id4862 . -32) (undo-tree-id4863 . -32) (undo-tree-id4864 . -32) (undo-tree-id4865 . -32) (undo-tree-id4866 . -32) (undo-tree-id4867 . -32) (undo-tree-id4868 . -32) (undo-tree-id4869 . -32) (undo-tree-id4870 . -32) (undo-tree-id4871 . -32) (undo-tree-id4872 . -32) (undo-tree-id4873 . -32) (undo-tree-id4874 . -32) (undo-tree-id4875 . -32) (undo-tree-id4876 . -32) (undo-tree-id4877 . -32) (undo-tree-id4878 . -31) (undo-tree-id4879 . -31) (undo-tree-id4880 . -31) (undo-tree-id4881 . -31) (undo-tree-id4882 . -31) (undo-tree-id4883 . -31) (undo-tree-id4884 . -31) (undo-tree-id4885 . -31) (undo-tree-id4886 . -31) (undo-tree-id4887 . -31) (undo-tree-id4888 . -31) (undo-tree-id4889 . -31) (undo-tree-id4890 . -31) (undo-tree-id4891 . -31) (undo-tree-id4892 . -31) (undo-tree-id4893 . -31) (undo-tree-id4894 . -31) (undo-tree-id4895 . -31) (undo-tree-id4896 . -31) (undo-tree-id4897 . -32) (undo-tree-id4898 . -32) (undo-tree-id4899 . -32) (undo-tree-id4900 . -32) (undo-tree-id4901 . -32) (undo-tree-id4902 . -32) (undo-tree-id4903 . -32) (undo-tree-id4904 . -32) (undo-tree-id4905 . -32) (undo-tree-id4906 . -32) (undo-tree-id4907 . -32) (undo-tree-id4908 . -3) (25744 . 25747) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25773) (undo-tree-id4909 . 1)) nil (25757 59952 616619 319000) 0 nil])
([nil nil ((25775 . 25776) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 25775) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25776) (undo-tree-id4315 . 1) (undo-tree-id4316 . 1) (undo-tree-id4317 . -1) 25775) nil (25757 59952 616233 65000) 0 nil])
([nil nil ((#("-" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t composition (1 1 [8226]))) . 25774) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1)) nil (25757 59952 616220 830000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 25774) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1)) nil (25757 59952 616192 604000) 0 nil])
([nil nil ((25774 . 25777) (#("V" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -25774) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) 25775 (25774 . 25775)) nil (25757 59952 616182 933000) 0 nil])
([nil nil ((25774 . 25776) (#("B" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -25774) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (#("y" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -25775) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -25776) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) 25777 (#("just need to" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25777) (undo-tree-id4231 . -11) (undo-tree-id4232 . 12) (undo-tree-id4233 . -11) (undo-tree-id4234 . -11) (undo-tree-id4235 . -11) (undo-tree-id4236 . -12) (undo-tree-id4237 . -11) (undo-tree-id4238 . -3) (undo-tree-id4239 . -8) (undo-tree-id4240 . -11) (undo-tree-id4241 . -11) (undo-tree-id4242 . -12) (undo-tree-id4243 . -12) (undo-tree-id4244 . -12) 25788) nil (25757 59952 615982 256000) 0 nil])
([nil nil ((25782 . 25784) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25782) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) 25783 (25780 . 25783) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -25780) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) 25781) nil (25757 59952 614967 400000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25827) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (t 25757 59952 632472 630000)) nil (25757 59982 443842 382000) 0 nil])
([nil nil ((25827 . 25828)) nil (25757 59982 443831 472000) 0 nil])
([nil nil ((26416 . 26417)) nil (25757 59982 443826 486000) 0 nil])
([nil nil ((#("open source image labeling tools" 0 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26502) (undo-tree-id5692 . -31) (undo-tree-id5693 . -32) (undo-tree-id5694 . -32) (t 25757 59982 504455 952000)) nil (25757 59999 691185 240000) 0 nil])
([nil nil ((#(" - VGG Image Annotator
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) composition (1 1 [8226])) 2 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 26504) (undo-tree-id5690 . -22) (undo-tree-id5691 . -23)) nil (25757 59999 691179 205000) 0 nil])
([nil nil ((#(" - LabelImg
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) composition (1 1 [8226])) 2 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 26504) (undo-tree-id5688 . -11) (undo-tree-id5689 . -12)) nil (25757 59999 691143 385000) 0 nil])
([nil nil ((#(" - OpenLabeler
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) composition (1 1 [8226])) 2 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 26504) (undo-tree-id5686 . -14) (undo-tree-id5687 . -15)) nil (25757 59999 691139 591000) 0 nil])
([nil nil ((#(" - ImgLab
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) composition (1 1 [8226])) 2 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 26504) (undo-tree-id5684 . -9) (undo-tree-id5685 . -10)) nil (25757 59999 691135 650000) 0 nil])
([nil nil ((#(" - commercial tool like LabelBox or Supervisely
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) composition (1 1 [8226])) 2 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)))) . 26504) (undo-tree-id5682 . -47) (undo-tree-id5683 . -48)) nil (25757 59999 691131 189000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26503) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1)) nil (25757 59999 691117 803000) 0 nil])
([nil nil ((#("*crowdsourcing in computer vision* 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 1 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t) 33 34 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t invisible org-link) 34 36 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26504) (undo-tree-id5712 . -35) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -36) (undo-tree-id5722 . -36) (undo-tree-id5723 . -36) (undo-tree-id5724 . -36) (undo-tree-id5725 . -36) (undo-tree-id5726 . -36) (undo-tree-id5727 . -36) (undo-tree-id5728 . -36) (undo-tree-id5729 . -7) (undo-tree-id5730 . -36) (undo-tree-id5731 . -36) (undo-tree-id5732 . -36) (undo-tree-id5733 . -36) (undo-tree-id5734 . -36) (undo-tree-id5735 . -36) (undo-tree-id5736 . -36) (undo-tree-id5737 . -36) (undo-tree-id5738 . -7) (undo-tree-id5739 . -7) (undo-tree-id5740 . -7) (undo-tree-id5741 . -7) (undo-tree-id5742 . -7) (undo-tree-id5743 . -7) (undo-tree-id5744 . -7) (undo-tree-id5745 . -7) (undo-tree-id5746 . -7) (undo-tree-id5747 . -7) (undo-tree-id5748 . -7) (undo-tree-id5749 . -7) (undo-tree-id5750 . -7) (undo-tree-id5751 . -7) (undo-tree-id5752 . -7) (undo-tree-id5753 . -7) (undo-tree-id5754 . -7) (undo-tree-id5755 . -7) (undo-tree-id5756 . -36) 26511 (t 25757 59999 708450 914000)) nil (25757 60013 72399 917000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26504) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1)) nil (25757 60013 72364 193000) 0 nil])
([nil nil ((#("Let's suppose you've obtained the bounding boxes for every image in the
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 72 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26504) (undo-tree-id5759 . -71) (undo-tree-id5760 . -72) (t 25757 60013 88449 216000)) nil (25757 60017 827700 71000) 0 nil])
([nil nil ((#("flowers dataset. 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26504) (undo-tree-id5757 . -17) (undo-tree-id5758 . -18)) nil (25757 60017 827694 84000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26504) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (t 25757 60017 836449 68000)) nil (25757 60079 37886 683000) 0 nil])
([nil nil ((26504 . 26508) (#("You then need to" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26504) (undo-tree-id5820 . -15) (undo-tree-id5821 . -15) (undo-tree-id5822 . -15) (undo-tree-id5823 . -15) (undo-tree-id5824 . -16) (undo-tree-id5825 . -15) (undo-tree-id5826 . -2) (undo-tree-id5827 . -2) (undo-tree-id5828 . -2) (undo-tree-id5829 . -2) (undo-tree-id5830 . -2) (undo-tree-id5831 . -2) (undo-tree-id5832 . -2) (undo-tree-id5833 . -2) (undo-tree-id5834 . -7) (undo-tree-id5835 . -12) (undo-tree-id5836 . -15) (undo-tree-id5837 . -15) (undo-tree-id5838 . -16) (undo-tree-id5839 . -16) (undo-tree-id5840 . -16) 26519) nil (25757 60079 37843 180000) 0 nil])
([nil nil ((26508 . 26511)) nil (25757 60079 37828 664000) 0 nil])
([nil nil ((#("The MSE is not a great metric to evaluate how well the model can predict
" 0 73 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26722) (undo-tree-id5785 . -72) (undo-tree-id5786 . -23) (undo-tree-id5787 . -5) (undo-tree-id5788 . -5) (undo-tree-id5789 . -5) (undo-tree-id5790 . -5) (undo-tree-id5791 . -5) (undo-tree-id5792 . -5) (undo-tree-id5793 . -5) (undo-tree-id5794 . -5) (undo-tree-id5795 . 69) (undo-tree-id5796 . -7) (undo-tree-id5797 . -8) (undo-tree-id5798 . -8) (undo-tree-id5799 . -8) (undo-tree-id5800 . -8) (undo-tree-id5801 . -8) (undo-tree-id5802 . -8) (undo-tree-id5803 . -8) (undo-tree-id5804 . -8) (undo-tree-id5805 . -11) (undo-tree-id5806 . -15) (undo-tree-id5807 . -17) (undo-tree-id5808 . -23) (undo-tree-id5809 . -23) (undo-tree-id5810 . -23) (undo-tree-id5811 . -23) (undo-tree-id5812 . -23) (undo-tree-id5813 . -23) (undo-tree-id5814 . -23) (undo-tree-id5815 . -23) (undo-tree-id5816 . -23) (undo-tree-id5817 . -23) (undo-tree-id5818 . -23) (undo-tree-id5819 . -73) 26745) nil (25757 60079 37826 647000) 0 nil])
([nil nil ((#("bounding boxes. 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26722) (undo-tree-id5762 . -16) (undo-tree-id5763 . -15) (undo-tree-id5764 . -15) (undo-tree-id5765 . -15) (undo-tree-id5766 . -15) (undo-tree-id5767 . -15) (undo-tree-id5768 . -15) (undo-tree-id5769 . -15) (undo-tree-id5770 . -15) (undo-tree-id5771 . -15) (undo-tree-id5772 . -15) (undo-tree-id5773 . -15) (undo-tree-id5774 . -15) (undo-tree-id5775 . -15) (undo-tree-id5776 . -15) (undo-tree-id5777 . -15) (undo-tree-id5778 . -15) (undo-tree-id5779 . -15) (undo-tree-id5780 . -15) (undo-tree-id5781 . -15) (undo-tree-id5782 . -15) (undo-tree-id5783 . -15) (undo-tree-id5784 . -17) 26737) nil (25757 60079 37801 652000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26722) (undo-tree-id5761 . -1)) nil (25757 60079 37715 461000) 0 nil])
([nil nil ((26405 . 26407) (t 25757 60079 100467 526000)) nil (25757 60099 723320 235000) 0 nil])
([nil nil ((#("- The datasets does not have bounding boxes around the flowers. So, we need to add
them ourselves. 

Then we create a dataset whose items will be batches of
preprocessed images along with their class labels and their bounding
boxes. 

Each item should be a tuple of the form (images, (class_labels, bounding_boxes)). 

The most common metric for this is the Intersection over Union (IoU): 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 63 64 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 64 82 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 82 83 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 83 98 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 98 99 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 99 100 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 100 101 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 101 108 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 108 109 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 109 157 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 157 212 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 212 226 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 226 234 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 234 235 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 235 290 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 290 291 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 291 297 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 297 307 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 307 308 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible t) 308 313 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) display ((raise -0.3) (height 0.7))) 313 318 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 318 319 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 319 320 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 320 390 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26405) (undo-tree-id5989 . -389) (undo-tree-id5990 . 388) (undo-tree-id5991 . -319) (undo-tree-id5992 . -319) (undo-tree-id5993 . -108) (undo-tree-id5994 . 384) (undo-tree-id5995 . -14) (undo-tree-id5996 . -101) (undo-tree-id5997 . -101) (undo-tree-id5998 . -101) (undo-tree-id5999 . -101) (undo-tree-id6000 . -101) (undo-tree-id6001 . -101) (undo-tree-id6002 . -101) (undo-tree-id6003 . -101) (undo-tree-id6004 . -101) (undo-tree-id6005 . -101) (undo-tree-id6006 . -101) (undo-tree-id6007 . -101) (undo-tree-id6008 . -101) (undo-tree-id6009 . -101) (undo-tree-id6010 . -101) (undo-tree-id6011 . -101) (undo-tree-id6012 . -101) (undo-tree-id6013 . -101) (undo-tree-id6014 . -101) (undo-tree-id6015 . -101) (undo-tree-id6016 . -101) (undo-tree-id6017 . -101) (undo-tree-id6018 . -101) (undo-tree-id6019 . -101) (undo-tree-id6020 . -101) (undo-tree-id6021 . -101) (undo-tree-id6022 . -101) (undo-tree-id6023 . -101) (undo-tree-id6024 . -101) (undo-tree-id6025 . -101) (undo-tree-id6026 . -101) (undo-tree-id6027 . -101) (undo-tree-id6028 . -101) (undo-tree-id6029 . -101) (undo-tree-id6030 . -101) (undo-tree-id6031 . -101) (undo-tree-id6032 . -101) (undo-tree-id6033 . -101) (undo-tree-id6034 . -101) (undo-tree-id6035 . -101) (undo-tree-id6036 . -101) (undo-tree-id6037 . -101) (undo-tree-id6038 . -101) (undo-tree-id6039 . -101) (undo-tree-id6040 . -101) (undo-tree-id6041 . -101) (undo-tree-id6042 . -101) (undo-tree-id6043 . -101) (undo-tree-id6044 . -101) (undo-tree-id6045 . -101) (undo-tree-id6046 . -101) (undo-tree-id6047 . -101) (undo-tree-id6048 . -101) (undo-tree-id6049 . -101) (undo-tree-id6050 . -101) (undo-tree-id6051 . -101) (undo-tree-id6052 . -101) (undo-tree-id6053 . -101) (undo-tree-id6054 . -101) (undo-tree-id6055 . -101) (undo-tree-id6056 . -101) (undo-tree-id6057 . -101) (undo-tree-id6058 . -101) (undo-tree-id6059 . -101) (undo-tree-id6060 . -101) (undo-tree-id6061 . -101) (undo-tree-id6062 . -101) (undo-tree-id6063 . -101) (undo-tree-id6064 . -101) (undo-tree-id6065 . -101) (undo-tree-id6066 . -101) (undo-tree-id6067 . -101) (undo-tree-id6068 . -101) (undo-tree-id6069 . 272) (undo-tree-id6070 . -125) (undo-tree-id6071 . 233) (undo-tree-id6072 . -169) (undo-tree-id6073 . -319) (undo-tree-id6074 . -319) (undo-tree-id6075 . -319) (undo-tree-id6076 . -319) (undo-tree-id6077 . -319) (undo-tree-id6078 . -319) (undo-tree-id6079 . -319) (undo-tree-id6080 . -319) (undo-tree-id6081 . -319) (undo-tree-id6082 . -319) (undo-tree-id6083 . -319) (undo-tree-id6084 . -319) (undo-tree-id6085 . -319) (undo-tree-id6086 . -319) (undo-tree-id6087 . -319) (undo-tree-id6088 . -319) (undo-tree-id6089 . -319) (undo-tree-id6090 . -319) (undo-tree-id6091 . -319) (undo-tree-id6092 . -319) (undo-tree-id6093 . -319) (undo-tree-id6094 . -319) (undo-tree-id6095 . -319) (undo-tree-id6096 . -319) (undo-tree-id6097 . -319) (undo-tree-id6098 . -319) (undo-tree-id6099 . -319) (undo-tree-id6100 . -319) (undo-tree-id6101 . -319) (undo-tree-id6102 . -319) (undo-tree-id6103 . -319) (undo-tree-id6104 . -319) (undo-tree-id6105 . -319) (undo-tree-id6106 . -319) (undo-tree-id6107 . -319) (undo-tree-id6108 . -319) (undo-tree-id6109 . -319) (undo-tree-id6110 . -319) (undo-tree-id6111 . -319) (undo-tree-id6112 . -319) (undo-tree-id6113 . -319) (undo-tree-id6114 . -319) (undo-tree-id6115 . -319) (undo-tree-id6116 . -319) (undo-tree-id6117 . -319) (undo-tree-id6118 . -319) (undo-tree-id6119 . -319) (undo-tree-id6120 . -319) (undo-tree-id6121 . -319) (undo-tree-id6122 . -319) (undo-tree-id6123 . -319) (undo-tree-id6124 . -319) (undo-tree-id6125 . -319) (undo-tree-id6126 . -319) (undo-tree-id6127 . -319) (undo-tree-id6128 . -319) (undo-tree-id6129 . -319) (undo-tree-id6130 . -319) (undo-tree-id6131 . -319) (undo-tree-id6132 . -319) (undo-tree-id6133 . -319) (undo-tree-id6134 . -319) (undo-tree-id6135 . -319) (undo-tree-id6136 . -319) (undo-tree-id6137 . -319) (undo-tree-id6138 . -319) (undo-tree-id6139 . -319) (undo-tree-id6140 . -319) (undo-tree-id6141 . -318) (undo-tree-id6142 . -318) (undo-tree-id6143 . -318) (undo-tree-id6144 . -318) (undo-tree-id6145 . -318) (undo-tree-id6146 . -318) (undo-tree-id6147 . -318) (undo-tree-id6148 . -318) (undo-tree-id6149 . -235) (undo-tree-id6150 . -235) (undo-tree-id6151 . -235) (undo-tree-id6152 . -235) (undo-tree-id6153 . -235) (undo-tree-id6154 . -235) (undo-tree-id6155 . -235) (undo-tree-id6156 . -235) (undo-tree-id6157 . -234) (undo-tree-id6158 . -234) (undo-tree-id6159 . -234) (undo-tree-id6160 . -234) (undo-tree-id6161 . -234) (undo-tree-id6162 . -234) (undo-tree-id6163 . -234) (undo-tree-id6164 . -234) (undo-tree-id6165 . -226) (undo-tree-id6166 . -226) (undo-tree-id6167 . -226) (undo-tree-id6168 . -226) (undo-tree-id6169 . -226) (undo-tree-id6170 . -226) (undo-tree-id6171 . -226) (undo-tree-id6172 . -226) (undo-tree-id6173 . -157) (undo-tree-id6174 . -157) (undo-tree-id6175 . -157) (undo-tree-id6176 . -157) (undo-tree-id6177 . -157) (undo-tree-id6178 . -157) (undo-tree-id6179 . -157) (undo-tree-id6180 . -157) (undo-tree-id6181 . -101) (undo-tree-id6182 . -101) (undo-tree-id6183 . -101) (undo-tree-id6184 . -101) (undo-tree-id6185 . -101) (undo-tree-id6186 . -101) (undo-tree-id6187 . -101) (undo-tree-id6188 . -101) (undo-tree-id6189 . -100) (undo-tree-id6190 . -100) (undo-tree-id6191 . -100) (undo-tree-id6192 . -100) (undo-tree-id6193 . -100) (undo-tree-id6194 . -100) (undo-tree-id6195 . -100) (undo-tree-id6196 . -100) (undo-tree-id6197 . -83) (undo-tree-id6198 . -83) (undo-tree-id6199 . -83) (undo-tree-id6200 . -83) (undo-tree-id6201 . -83) (undo-tree-id6202 . -83) (undo-tree-id6203 . -83) (undo-tree-id6204 . -83) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -2) (undo-tree-id6215 . -2) (undo-tree-id6216 . -2) (undo-tree-id6217 . -2) (undo-tree-id6218 . -2) (undo-tree-id6219 . -2) (undo-tree-id6220 . -2) (undo-tree-id6221 . -2) (undo-tree-id6222 . -2) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -84) (undo-tree-id6250 . -84) (undo-tree-id6251 . -84) (undo-tree-id6252 . -84) (undo-tree-id6253 . -84) (undo-tree-id6254 . -84) (undo-tree-id6255 . -84) (undo-tree-id6256 . -84) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -390) (undo-tree-id6266 . -319) (undo-tree-id6267 . -83) (undo-tree-id6268 . -83) (undo-tree-id6269 . -83) (undo-tree-id6270 . -83) (undo-tree-id6271 . -83) (undo-tree-id6272 . -83) (undo-tree-id6273 . -83) (undo-tree-id6274 . -83) (undo-tree-id6275 . -100) (undo-tree-id6276 . -100) (undo-tree-id6277 . -100) (undo-tree-id6278 . -100) (undo-tree-id6279 . -100) (undo-tree-id6280 . -100) (undo-tree-id6281 . -100) (undo-tree-id6282 . -100) (undo-tree-id6283 . -101) (undo-tree-id6284 . -101) (undo-tree-id6285 . -101) (undo-tree-id6286 . -101) (undo-tree-id6287 . -101) (undo-tree-id6288 . -101) (undo-tree-id6289 . -101) (undo-tree-id6290 . -101) (undo-tree-id6291 . -157) (undo-tree-id6292 . -157) (undo-tree-id6293 . -157) (undo-tree-id6294 . -157) (undo-tree-id6295 . -157) (undo-tree-id6296 . -157) (undo-tree-id6297 . -157) (undo-tree-id6298 . -157) (undo-tree-id6299 . -226) (undo-tree-id6300 . -226) (undo-tree-id6301 . -226) (undo-tree-id6302 . -226) (undo-tree-id6303 . -226) (undo-tree-id6304 . -226) (undo-tree-id6305 . -226) (undo-tree-id6306 . -226) (undo-tree-id6307 . -234) (undo-tree-id6308 . -234) (undo-tree-id6309 . -234) (undo-tree-id6310 . -234) (undo-tree-id6311 . -234) (undo-tree-id6312 . -234) (undo-tree-id6313 . -234) (undo-tree-id6314 . -234) (undo-tree-id6315 . -235) (undo-tree-id6316 . -235) (undo-tree-id6317 . -235) (undo-tree-id6318 . -235) (undo-tree-id6319 . -235) (undo-tree-id6320 . -235) (undo-tree-id6321 . -235) (undo-tree-id6322 . -235) (undo-tree-id6323 . -318) (undo-tree-id6324 . -318) (undo-tree-id6325 . -318) (undo-tree-id6326 . -318) (undo-tree-id6327 . -318) (undo-tree-id6328 . -318) (undo-tree-id6329 . -318) (undo-tree-id6330 . -318) (undo-tree-id6331 . -319) (undo-tree-id6332 . -319) (undo-tree-id6333 . -319) (undo-tree-id6334 . -319) (undo-tree-id6335 . -319) (undo-tree-id6336 . -319) (undo-tree-id6337 . -319) (undo-tree-id6338 . -319) (undo-tree-id6339 . -319) (undo-tree-id6340 . -390) 26724) nil (25757 60099 723307 113000) 0 nil])
([nil nil ((25829 . 25830) 25774) nil (25757 60099 722877 184000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25830 . 25831) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -26220) (25830 . 26221)) nil (25757 60099 722875 606000) 0 nil])
([nil nil ((#("by adding a second dense output layer with four units: 
" 0 2 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3 55 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 55 56 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25774) (undo-tree-id5921 . -55) (undo-tree-id5922 . -56) (undo-tree-id5923 . -56) (undo-tree-id5924 . -56) (undo-tree-id5925 . -56) (undo-tree-id5926 . -56) (undo-tree-id5927 . -56) (undo-tree-id5928 . -56) (undo-tree-id5929 . -56) (undo-tree-id5930 . -56) (undo-tree-id5931 . -56) (undo-tree-id5932 . -56) (undo-tree-id5933 . -56) (undo-tree-id5934 . -56) (undo-tree-id5935 . -56) (undo-tree-id5936 . -56) (undo-tree-id5937 . -56) (undo-tree-id5938 . -56) (undo-tree-id5939 . -56) (undo-tree-id5940 . -56) (undo-tree-id5941 . -56) (undo-tree-id5942 . -56) (undo-tree-id5943 . -56) (undo-tree-id5944 . -56) (undo-tree-id5945 . -56) (undo-tree-id5946 . -56) (undo-tree-id5947 . -56) (undo-tree-id5948 . -56) (undo-tree-id5949 . -56) (undo-tree-id5950 . -56) (undo-tree-id5951 . -56) (undo-tree-id5952 . -56) (undo-tree-id5953 . -56) (undo-tree-id5954 . -56) (undo-tree-id5955 . -56) (undo-tree-id5956 . -56) (undo-tree-id5957 . -56) (undo-tree-id5958 . -56) (undo-tree-id5959 . -56) (undo-tree-id5960 . -56) (undo-tree-id5961 . -56) (undo-tree-id5962 . -56) (undo-tree-id5963 . -56) (undo-tree-id5964 . -56) (undo-tree-id5965 . -56) (undo-tree-id5966 . -56) (undo-tree-id5967 . -56) (undo-tree-id5968 . -56) (undo-tree-id5969 . -56) (undo-tree-id5970 . -56) (undo-tree-id5971 . -56) (undo-tree-id5972 . -56) (undo-tree-id5973 . -56) (undo-tree-id5974 . -56) (undo-tree-id5975 . -56) (undo-tree-id5976 . -56) (undo-tree-id5977 . -56) (undo-tree-id5978 . -56) (undo-tree-id5979 . -56) (undo-tree-id5980 . -56) (undo-tree-id5981 . -56) (undo-tree-id5982 . -56) (undo-tree-id5983 . -56) (undo-tree-id5984 . -56) (undo-tree-id5985 . -56) (undo-tree-id5986 . -56) (undo-tree-id5987 . -56) (undo-tree-id5988 . -56)) nil (25757 60099 722871 557000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t)) . 25774) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) (undo-tree-id5913 . -1) (undo-tree-id5914 . -1) (undo-tree-id5915 . -1) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1)) nil (25757 60099 722817 842000) 0 nil])
([nil nil ((25776 . 25779) (t 25757 60099 784481 816000)) nil (25757 60145 723000 242000) 0 nil])
([nil nil ((25779 . 25780) (#("T" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25779) (undo-tree-id6413 . 1) (undo-tree-id6414 . -1)) nil (25757 60145 722998 593000) 0 nil])
([nil nil ((#(" around the flowers" 0 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25820) (undo-tree-id6393 . -18) (undo-tree-id6394 . -1) (undo-tree-id6395 . -8) (undo-tree-id6396 . -8) (undo-tree-id6397 . -8) (undo-tree-id6398 . -8) (undo-tree-id6399 . -8) (undo-tree-id6400 . -8) (undo-tree-id6401 . -8) (undo-tree-id6402 . -8) (undo-tree-id6403 . -13) (undo-tree-id6404 . -13) (undo-tree-id6405 . -13) (undo-tree-id6406 . -13) (undo-tree-id6407 . -13) (undo-tree-id6408 . -13) (undo-tree-id6409 . -13) (undo-tree-id6410 . -13) (undo-tree-id6411 . -1) (undo-tree-id6412 . -19)) nil (25757 60145 722995 312000) 0 nil])
([nil nil ((25822 . 25825) (#("So, we" 0 6 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25822) (undo-tree-id6380 . -5) (undo-tree-id6381 . -5) (undo-tree-id6382 . -5) (undo-tree-id6383 . -5) (undo-tree-id6384 . -6) (undo-tree-id6385 . -5) (undo-tree-id6386 . -1) (undo-tree-id6387 . -2) (undo-tree-id6388 . -5) (undo-tree-id6389 . -5) (undo-tree-id6390 . -6) (undo-tree-id6391 . -6) (undo-tree-id6392 . -6) 25827) nil (25757 60145 722979 777000) 0 nil])
([nil nil ((25837 . 25838) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25837) (undo-tree-id6379 . -1) 25824) nil (25757 60145 722968 440000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25855) (undo-tree-id6378 . -1)) nil (25757 60145 722965 897000) 0 nil])
([nil nil ((25855 . 25857)) nil (25757 60145 722963 909000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25858) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) 25859 (25857 . 25859) (#("Then we c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25857) (undo-tree-id6363 . -8) (undo-tree-id6364 . 9) (undo-tree-id6365 . -8) (undo-tree-id6366 . -8) (undo-tree-id6367 . -8) (undo-tree-id6368 . -9) (undo-tree-id6369 . -8) (undo-tree-id6370 . -3) (undo-tree-id6371 . -6) (undo-tree-id6372 . -7) (undo-tree-id6373 . -8) (undo-tree-id6374 . -8) (undo-tree-id6375 . -9) (undo-tree-id6376 . -9) (undo-tree-id6377 . -9) 25865) nil (25757 60145 722960 906000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25774) (undo-tree-id6341 . -2) (undo-tree-id6342 . -2) (undo-tree-id6343 . -2) (undo-tree-id6344 . -2) (undo-tree-id6345 . -2) (undo-tree-id6346 . -2) (undo-tree-id6347 . -2) (undo-tree-id6348 . -2) (undo-tree-id6349 . -2) (undo-tree-id6350 . -2) (undo-tree-id6351 . -2) (undo-tree-id6352 . -2) 25776 (25773 . 25776) 25746) nil (25757 60145 722938 29000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226]))) . 25775) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (t 25757 60145 736526 975000)) nil (25757 60152 331014 244000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 25775) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1)) nil (25757 60152 331011 105000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25778) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1)) nil (25757 60152 331220 800000) 0 nil])
([nil nil ((25821 . 25823) (25820 . 25821)) nil (25757 60186 162513 55000) 0 nil] [nil nil ((#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 25778) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1)) ((25778 . 25779)) (25757 60152 331002 116000) 0 nil])
([nil nil ((#("you need to " 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25823) (undo-tree-id6447 . -11) (undo-tree-id6448 . 12) (undo-tree-id6449 . -11) (undo-tree-id6450 . -11) (undo-tree-id6451 . -11) (undo-tree-id6452 . -4) (undo-tree-id6453 . -12) (undo-tree-id6454 . -11) (undo-tree-id6455 . -2) (undo-tree-id6456 . -7) (undo-tree-id6457 . -10) (undo-tree-id6458 . -11) (undo-tree-id6459 . -11) (undo-tree-id6460 . -12) 25834) nil (25757 60186 162511 428000) 0 nil])
nil
([nil nil ((25838 . 25840) (25832 . 25838) (#("ourselves" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25832) (undo-tree-id6439 . -8) (undo-tree-id6440 . -8) (undo-tree-id6441 . -9) (undo-tree-id6442 . -8) (undo-tree-id6443 . -7) (undo-tree-id6444 . -9) (undo-tree-id6445 . -9) (undo-tree-id6446 . -9)) nil (25757 60186 162500 154000) 0 nil])
([nil nil ((25845 . 25846) (#("C" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25845) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1)) nil (25757 60186 162452 831000) 0 nil])
([nil nil ((25840 . 25841) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25840) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1)) nil (25757 60186 162449 576000) 0 nil])
([nil nil ((25892 . 25893) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25892) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) 25856) nil (25757 60186 162445 679000) 0 nil])
([nil nil ((25914 . 25916) (25913 . 25914)) nil (25757 60186 162435 201000) 0 nil])
([nil nil ((25964 . 25965) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25964) (undo-tree-id6423 . -1) 25915) nil (25757 60186 162428 131000) 0 nil])
([nil nil ((25973 . 25975) (t 25757 60186 220581 41000)) nil (25757 60205 371936 654000) 0 nil])
([nil nil ((25974 . 25975) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25974) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -25975) (undo-tree-id6491 . 1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) 25974) nil (25757 60205 371933 168000) 0 nil])
([nil nil ((25975 . 25976) (#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25975) (undo-tree-id6461 . 1) (undo-tree-id6462 . -1) (25975 . 25976) (#("E" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 25975) (undo-tree-id6463 . 1) (undo-tree-id6464 . -1)) nil (25757 60205 371808 332000) 0 nil])
([nil nil ((26127 . 26128) (#(":" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26127) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (t 25757 60205 384610 988000)) nil (25757 60223 434112 590000) 0 nil])
([nil nil ((#(" 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 26705) (undo-tree-id6508 . -1) (undo-tree-id6509 . -2)) nil (25757 60244 478818 532000) 0 nil])
([nil nil ((27757 . 27758) (t 25757 60245 388681 946000)) nil (25757 60432 420402 646000) 0 nil] [nil nil ((#("*** non-max suppression 
" 0 2 (fontified t face org-hide keymap (keymap) line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent))) 2 3 (fontified t composition (3 1 [9675]) keymap (keymap) face org-level-3 line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent))) 3 4 (fontified t keymap (keymap) face org-level-3 line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent))) 4 24 (fontified t face org-level-3 line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent))) 24 25 (fontified t line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)))) . 26948) (undo-tree-id6513 . -24) (undo-tree-id6515 . -4) (undo-tree-id6517 . -4) (undo-tree-id6519 . -4) (undo-tree-id6521 . -4) (undo-tree-id6523 . -4) (undo-tree-id6525 . -4) (undo-tree-id6527 . -4) (undo-tree-id6529 . -4) (undo-tree-id6531 . -4) (undo-tree-id6533 . -4) (undo-tree-id6535 . -4) (undo-tree-id6537 . -4) (undo-tree-id6539 . -4) (undo-tree-id6541 . -4) (undo-tree-id6542 . -4) (undo-tree-id6543 . -4) (undo-tree-id6545 . -4) (undo-tree-id6547 . -4) (undo-tree-id6549 . -4) (undo-tree-id6551 . -4) (undo-tree-id6553 . -4) (undo-tree-id6555 . -4) (undo-tree-id6557 . -4) (undo-tree-id6559 . -4) (undo-tree-id6561 . -4) (undo-tree-id6563 . -4) (undo-tree-id6565 . -25) 26952 (t 25757 60223 492641 731000)) ((26948 . 26973)) (25757 60243 888669 558000) 0 nil])
([nil nil ((27685 . 27686) 27657) nil (25757 60432 420401 626000) 0 nil])
([nil nil ((26947 . 26948) (t 25757 60241 448674 468000) 26904) ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 26947) (undo-tree-id6566 . -1) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (t 25757 60243 756678 836000)) (25757 60243 750696 379000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 27686) (undo-tree-id6616 . 1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1)) nil (25757 60432 420399 471000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 27757) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1)) nil (25757 60432 420388 584000) 0 nil])
([nil nil ((27757 . 27758) (t 25757 60432 481143 562000)) nil (25757 60511 4791 403000) 0 nil])
([nil nil ((#("and" 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 27986) (undo-tree-id6648 . -2) (undo-tree-id6649 . -2) (undo-tree-id6650 . -2) (undo-tree-id6651 . -2) (undo-tree-id6652 . -2) (undo-tree-id6653 . -2) (undo-tree-id6654 . -2) (undo-tree-id6655 . -2) (undo-tree-id6656 . -2) (undo-tree-id6657 . -2) (undo-tree-id6658 . -2) (undo-tree-id6659 . -2) (undo-tree-id6660 . -2) (undo-tree-id6661 . -2) (undo-tree-id6662 . -2) (undo-tree-id6663 . -2) (undo-tree-id6664 . -2) (undo-tree-id6665 . -2) (undo-tree-id6666 . -2) (undo-tree-id6667 . -2) (undo-tree-id6668 . -3) (undo-tree-id6669 . -2) (undo-tree-id6670 . -2) (undo-tree-id6671 . -2) (undo-tree-id6672 . -2) (undo-tree-id6673 . -2) (undo-tree-id6674 . -2) (undo-tree-id6675 . -2) (undo-tree-id6676 . -2) (undo-tree-id6677 . -2) (undo-tree-id6678 . -2) (undo-tree-id6679 . -3) (undo-tree-id6680 . -3) (undo-tree-id6681 . -3) 27988) nil (25757 60511 4789 445000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 27986) (undo-tree-id6644 . 1) (undo-tree-id6645 . 1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1)) nil (25757 60511 4765 576000) 0 nil])
([nil nil ((27758 . 27760)) nil (25757 60511 4761 866000) 0 nil])
([nil nil ((27834 . 27836) (27833 . 27834)) nil (25757 60511 4760 819000) 0 nil])
([nil nil ((27842 . 27843) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -27842) (undo-tree-id6626 . 1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) 27835) nil (25757 60511 4758 175000) 0 nil])
([nil nil ((27908 . 27910) (27907 . 27908)) nil (25757 60511 4733 16000) 0 nil])
([nil nil ((27922 . 27923) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 27922) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -27923) (undo-tree-id6684 . -1) 27910 (t 25757 60511 17389 605000)) nil (25757 60522 330252 736000) 0 nil])
([nil nil ((27924 . 27926) (27923 . 27924) (t 25757 60522 341427 200000)) nil (25757 60534 446768 954000) 0 nil])
([nil nil ((27921 . 27922) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -27921) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) 27922 (27921 . 27922) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 27921) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1)) nil (25757 60534 446766 161000) 0 nil])
([nil nil ((27926 . 27927) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 27926)) nil (25757 60534 446734 477000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -27924) (undo-tree-id6710 . -2) (undo-tree-id6711 . -2) (undo-tree-id6712 . -2) (undo-tree-id6713 . -2) (undo-tree-id6714 . -2) (undo-tree-id6715 . -2) (undo-tree-id6716 . -2) (undo-tree-id6717 . -2) (undo-tree-id6718 . -2) (undo-tree-id6719 . -2) (undo-tree-id6720 . -2) (undo-tree-id6721 . -2) 27926 (27923 . 27926) (t 25757 60534 505468 140000) 27908) nil (25757 60543 139857 294000) 0 nil])
([nil nil ((27925 . 27999) (#("- 

- The filter size must be equal to the size of the input feature maps," 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) composition (1 1 [8226])) 5 6 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 20 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 20 74 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 27925) (undo-tree-id6918 . -6) (undo-tree-id6919 . -6) (undo-tree-id6920 . 67) (undo-tree-id6921 . -6) (undo-tree-id6922 . -6) (undo-tree-id6923 . -74) (undo-tree-id6924 . -6) (undo-tree-id6925 . -10) (undo-tree-id6926 . -17) (undo-tree-id6927 . -20) (undo-tree-id6928 . -20) (undo-tree-id6929 . -20) (undo-tree-id6930 . -20) (undo-tree-id6931 . -20) (undo-tree-id6932 . -20) (undo-tree-id6933 . -20) (undo-tree-id6934 . -20) (undo-tree-id6935 . -20) (undo-tree-id6936 . -20) (undo-tree-id6937 . -20) (undo-tree-id6938 . -20) (undo-tree-id6939 . -20) (undo-tree-id6940 . -74) (undo-tree-id6941 . -74) (undo-tree-id6942 . -74) (undo-tree-id6943 . -74) (undo-tree-id6944 . -74) (undo-tree-id6945 . -74) (undo-tree-id6946 . -74) (undo-tree-id6947 . -74) (undo-tree-id6948 . -74) (undo-tree-id6949 . -74) (undo-tree-id6950 . -74) (undo-tree-id6951 . -4) (27925 . 27929) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 27995) (undo-tree-id6952 . -1) (undo-tree-id6953 . -1) (undo-tree-id6954 . -1) (undo-tree-id6955 . -1) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (#("
  " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -27996) (undo-tree-id6964 . -3) (undo-tree-id6965 . -3) (undo-tree-id6966 . -3) (undo-tree-id6967 . -3) (undo-tree-id6968 . -3) (undo-tree-id6969 . -3) (undo-tree-id6970 . -3) (undo-tree-id6971 . -3) (undo-tree-id6972 . -3) (undo-tree-id6973 . -3) (undo-tree-id6974 . -3) (undo-tree-id6975 . -3) 27999 (27996 . 27999) (t 25757 60543 153497 589000) 27941) nil (25757 60573 993058 495000) 0 nil])
([nil nil ((27998 . 27999) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 27998) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -27999) (undo-tree-id6915 . 1) (undo-tree-id6916 . 1) (undo-tree-id6917 . -1) 27998) nil (25757 60573 993011 580000) 0 nil])
([nil nil ((27999 . 28000) (#("you must u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 27999) (undo-tree-id6888 . -9) (undo-tree-id6889 . 10) (undo-tree-id6890 . -9) (undo-tree-id6891 . -9) (undo-tree-id6892 . -9) (undo-tree-id6893 . -10) (undo-tree-id6894 . -9) (undo-tree-id6895 . -2) (undo-tree-id6896 . -7) (undo-tree-id6897 . -10) (undo-tree-id6898 . -9) (undo-tree-id6899 . -8) (undo-tree-id6900 . -9) (undo-tree-id6901 . -9) (undo-tree-id6902 . -10) (undo-tree-id6903 . -10) (undo-tree-id6904 . -10) 28008) nil (25757 60573 993001 182000) 0 nil])
([nil nil ((27997 . 28022) (#("- 

- Use \"valid\" padding" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil composition (1 1 [8226])) 5 7 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 7 25 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 27997) (undo-tree-id6759 . -25) (undo-tree-id6760 . -25) (undo-tree-id6761 . 18) (undo-tree-id6762 . -6) (undo-tree-id6763 . -6) (undo-tree-id6764 . 18) (undo-tree-id6765 . -6) (undo-tree-id6766 . -6) (undo-tree-id6767 . -5) (undo-tree-id6768 . -5) (undo-tree-id6769 . -5) (undo-tree-id6770 . -5) (undo-tree-id6771 . -5) (undo-tree-id6772 . -5) (undo-tree-id6773 . -5) (undo-tree-id6774 . -5) (undo-tree-id6775 . -5) (undo-tree-id6776 . -5) (undo-tree-id6777 . -5) (undo-tree-id6778 . -5) (undo-tree-id6779 . -5) (undo-tree-id6780 . -5) (undo-tree-id6781 . -5) (undo-tree-id6782 . -5) (undo-tree-id6783 . -5) (undo-tree-id6784 . -5) (undo-tree-id6785 . -5) (undo-tree-id6786 . -5) (undo-tree-id6787 . -5) (undo-tree-id6788 . -5) (undo-tree-id6789 . -5) (undo-tree-id6790 . -5) (undo-tree-id6791 . -5) (undo-tree-id6792 . -5) (undo-tree-id6793 . -5) (undo-tree-id6794 . -5) (undo-tree-id6795 . -5) (undo-tree-id6796 . -5) (undo-tree-id6797 . -5) (undo-tree-id6798 . -5) (undo-tree-id6799 . -5) (undo-tree-id6800 . -5) (undo-tree-id6801 . -5) (undo-tree-id6802 . -5) (undo-tree-id6803 . -5) (undo-tree-id6804 . -5) (undo-tree-id6805 . -5) (undo-tree-id6806 . -5) (undo-tree-id6807 . -5) (undo-tree-id6808 . -5) (undo-tree-id6809 . -5) (undo-tree-id6810 . -5) (undo-tree-id6811 . -5) (undo-tree-id6812 . -5) (undo-tree-id6813 . -5) (undo-tree-id6814 . -5) (undo-tree-id6815 . -5) (undo-tree-id6816 . -5) (undo-tree-id6817 . -5) (undo-tree-id6818 . -6) (undo-tree-id6819 . -6) (undo-tree-id6820 . -6) (undo-tree-id6821 . -6) (undo-tree-id6822 . -6) (undo-tree-id6823 . -6) (undo-tree-id6824 . -6) (undo-tree-id6825 . -6) (undo-tree-id6826 . -6) (undo-tree-id6827 . -6) (undo-tree-id6828 . -6) (undo-tree-id6829 . -6) (undo-tree-id6830 . -6) (undo-tree-id6831 . -8) (undo-tree-id6832 . -6) (undo-tree-id6833 . -6) (undo-tree-id6834 . -6) (undo-tree-id6835 . -6) (undo-tree-id6836 . -6) (undo-tree-id6837 . -6) (undo-tree-id6838 . -6) (undo-tree-id6839 . -6) (undo-tree-id6840 . -6) (undo-tree-id6841 . -6) (undo-tree-id6842 . -6) (undo-tree-id6843 . -6) (undo-tree-id6844 . -6) (undo-tree-id6845 . -6) (undo-tree-id6846 . -7) (undo-tree-id6847 . -7) (undo-tree-id6848 . -7) (undo-tree-id6849 . -7) (undo-tree-id6850 . -7) (undo-tree-id6851 . -7) (undo-tree-id6852 . -7) (undo-tree-id6853 . -7) (undo-tree-id6854 . -6) (undo-tree-id6855 . -6) (undo-tree-id6856 . -6) (undo-tree-id6857 . -6) (undo-tree-id6858 . -6) (undo-tree-id6859 . -6) (undo-tree-id6860 . -6) (undo-tree-id6861 . -6) (undo-tree-id6862 . -6) (undo-tree-id6863 . -6) (undo-tree-id6864 . -6) (undo-tree-id6865 . -6) (undo-tree-id6866 . -6) (undo-tree-id6867 . -6) (undo-tree-id6868 . -6) (undo-tree-id6869 . -6) (undo-tree-id6870 . -6) (undo-tree-id6871 . -6) (undo-tree-id6872 . -6) (undo-tree-id6873 . -25) (undo-tree-id6874 . -25) (undo-tree-id6875 . -25) (undo-tree-id6876 . -25) (undo-tree-id6877 . -25) (undo-tree-id6878 . -25) (undo-tree-id6879 . -25) (undo-tree-id6880 . -25) (undo-tree-id6881 . -25) (undo-tree-id6882 . -25) (undo-tree-id6883 . -25) (undo-tree-id6884 . -4) (27997 . 28001) 28019 (28018 . 28019) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 28018) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1)) nil (25757 60573 992983 908000) 0 nil])
([nil nil ((28021 . 28022) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -28021) (undo-tree-id6722 . 1) (undo-tree-id6723 . 1) (undo-tree-id6724 . -1) (#("  " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 28021) (undo-tree-id6725 . 1) (undo-tree-id6726 . 1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -28022) (undo-tree-id6747 . 1) (undo-tree-id6748 . 1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) 28021) nil (25757 60573 992748 0) 0 nil])
([nil nil ((27686 . 27688) (t 25757 60574 53605 61000)) nil (25757 60585 108397 723000) 0 nil])
([nil nil ((27685 . 27686) 27657) nil (25757 60585 108390 820000) 0 nil])
([nil nil ((28089 . 28090) (t 25757 60585 169644 558000) 28064) nil (25757 60589 431673 928000) 0 nil])
([nil nil ((28221 . 28222) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 28221) (undo-tree-id6976 . -1) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) (t 25757 60589 441659 849000)) nil (25757 60637 151519 762000) 0 nil])
([nil nil ((28112 . 28113) (t 25757 60637 165834 797000) 28093) nil (25757 60667 429583 750000) 0 nil])
([nil nil ((28286 . 28287) (#("â€™" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 28286) (undo-tree-id6979 . -1) (t 25757 60667 441949 505000)) nil (25757 60680 832869 467000) 0 nil])
([nil nil ((28371 . 28372) (#("   " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 28371) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -28372) (undo-tree-id6982 . -1) 28352 (t 25757 60680 846001 155000)) nil (25757 60689 791935 580000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -28430) (undo-tree-id6983 . -2) (undo-tree-id6984 . -2) (undo-tree-id6985 . -2) (undo-tree-id6986 . -2) (undo-tree-id6987 . -2) (undo-tree-id6988 . -2) (undo-tree-id6989 . -2) (undo-tree-id6990 . -2) (undo-tree-id6991 . -2) (undo-tree-id6992 . -2) (undo-tree-id6993 . -2) (undo-tree-id6994 . -2) 28432 (28429 . 28432) (t 25757 60689 806035 971000) 28406) nil (25757 60696 785836 672000) 0 nil])
([nil nil ((28563 . 28564) (#("   " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 28563) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -28564) (undo-tree-id7019 . -1) 28531 (t 25757 60696 794063 278000)) nil (25757 60729 880558 969000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 28503) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1)) nil (25757 60729 880504 871000) 0 nil])
([nil nil ((28503 . 28504) (#("   " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 1 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 28503) (undo-tree-id6995 . -3) (undo-tree-id6996 . -3) (undo-tree-id6997 . -3) (undo-tree-id6998 . -3) (undo-tree-id6999 . -3) (undo-tree-id7000 . -3) (undo-tree-id7001 . -3) (undo-tree-id7002 . -3) (undo-tree-id7003 . -3) (undo-tree-id7004 . -3) (undo-tree-id7005 . -3) (undo-tree-id7006 . -3) (undo-tree-id7007 . -3) (undo-tree-id7008 . -3) (undo-tree-id7009 . -3) (undo-tree-id7010 . -3) (undo-tree-id7011 . -3) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -28504) (undo-tree-id7014 . -1) 28503) nil (25757 60729 880500 702000) 0 nil])
([nil nil ((28510 . 28511)) nil (25757 60729 880472 100000) 0 nil])
([nil nil ((28511 . 28513)) nil (25757 60729 880465 780000) 0 nil])
([nil nil ((29065 . 29066) (#("f" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . 29065) (t 25757 60729 942194 626000)) nil (25757 60783 764936 279000) 0 nil])
([nil nil ((29597 . 29598) (t 25757 60783 774413 930000) 29539) nil (25757 60879 131343 833000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 29598) (undo-tree-id7020 . 1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (t 25757 60879 146818 657000)) nil (25757 60883 83845 889000) 0 nil])
([nil nil ((31386 . 31387) (31385 . 31386) (t 25757 60883 98835 831000) 31329) nil (25757 60922 470604 607000) 0 nil])
([nil current ((31388 . 31389) (31387 . 31388) (t 25757 60922 487008 617000) 31387) nil (25757 60924 853345 930000) 0 nil])
nil
